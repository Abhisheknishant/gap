# create new files for the primitive groups from the old library.
# ahulpke, 6-jan-00

PRIMNUMS:=[];
    # some harmless family/type that will cause no side effect
DUMMYTYPE:=NewType(NewFamily("DummyFamily"),
  IsObject and IsPositionalObjectRep and IsAttributeStoringRep);
FACTO:=function(n,q)
local dummy;
  dummy:=Objectify(DUMMYTYPE,rec());
  if q=1 then
    SetName(dummy,Concatenation("Factorial(",String(n),")"));
  else
    SetName(dummy,Concatenation("Factorial(",String(n),")/",String(q)));
  fi;
  return dummy;
end;

CreatePrimitiveGroups:=function(deg)
local dom,n,a,l,i,g,e,matgens,s,p,rdom;
  dom:=[1..deg];
  rdom:=[2..deg];
  n:=NrPrimitiveGroups(deg);
  if deg<=255 then
    a:=NrAffinePrimitiveGroups(deg);
  else
    a:=0;
  fi;
  PRIMNUMS[deg]:=[a,n];
  l:=[];
  for i in [1..n] do
    g:=PrimitiveGroup(deg,i);
    s:=Size(g);
    g:=Group(GeneratorsOfGroup(g),());
    SetSize(g,s);
    if NrMovedPoints(g)<>deg then
      Error("moved points");
    fi;
    if not IsTransitive(g,dom) then
      Error("transitivity");
    fi;
    if not IsPrimitive(g,dom) then
      Error("primitivity");
    fi;
    e:=[i, # place holder for ID
	0, # place holder for size
        0, # place holder for `IsSimpleGroup'/`IsSolvableGroup'
	#O'Nan-Scott type: 0: unknown
	0];
   
    if HasName(g) then
      e[7]:=Name(g);
    else
      e[7]:=0;
    fi;
    
    # is there Sims number and Buekenhout/Leemans name? (These are better,
    # that the automatic ones by Heiko)
    if deg<=50 and HasSimsNo(g) then
      e[10]:=SimsNo(g);
      e[7]:=SimsName(g);
    fi;

    if IsNaturalAlternatingGroup(g) then
      e[2]:=FACTO(deg,2);
      e[3]:=1+2*NumBol(deg<=4);
      e[4]:="2";
      e[5]:=[[deg-1,1]];
      e[6]:=deg-2;
      e[7]:="A_n";
      e[8]:=["A",deg,1];
      # no generator entry
      e[9]:=deg;
    elif IsNaturalSymmetricGroup(g) then
      e[2]:=FACTO(deg,1);
      e[3]:=NumBol(deg<=2)+2*NumBol(deg<=4);
      e[4]:="2";
      e[5]:=[[deg-1,1]];
      e[6]:=deg;
      e[7]:="S_n";
      e[8]:=["A",deg,1];
      # no generator entry
      e[9]:=deg;
    else
      e[2]:=Size(g);
      e[3]:=NumBol(IsSimpleGroup(g))+2*NumBol(IsSolvableGroup(g));
      e[5]:=Collected(List(Orbits(Stabilizer(g,1),rdom),Length));
      e[6]:=Transitivity(g,dom);
      if i<=a then
	e[4]:="1";
	s:=SmallGeneratingSet(g);
	e[9]:=s;
  # it is tempting to build on top of matrices, but then again we would
  # be prone to errors due to the matrix code.
  #      if not IsBound(g!.matrixGroup) then
  #        # in some cases matrix generators were not given
  #	s:=Stabilizer(g,1);
  #	s:=Subgroup(g,SmallGeneratingSet(s));
  #	p:=Pcgs(Earns(g));
  #	matgens:=LinearOperationLayer(s,p);
  #      else
  #	matgens:=GeneratorsOfGroup(g!.matrixGroup);
  #      fi;
  #      # generator entry: characteristic,matrix generators
  #      e[7]:=[Characteristic(matgens[1]),
  #             List(matgens,i->List(i,j->List(j,Int)))];
      else
	e[4]:=ONanScottType(g);
        s:=SmallGeneratingSet(g);
	e[9]:=s;
      fi;
      s:=SocleTypePrimitiveGroup(g);
      e[8]:=[s.series,s.parameter,s.width];
    fi;

    # blanks
    if IsString(e[7]) then
      e[7]:=ReplacedString(e[7]," ","_@");
    fi;

    Add(l,e);
  od;
  return l;
end;


PrintPrimGrps:=function(l,id)
local nr,sel,i,fnam,header;
  fnam:=Concatenation("prim",String(id),".grp");
  PrintTo("/tmp/emilschlonz",
"#############################################################################\n",
"##\n","#A  ",fnam,
"                 GAP group library             Heiko Theissen\n",
"#A                                                          John Dixon\n",
"#A                                                          Brian Mortimer\n",
"#A                                                          Charles Sims\n",
"##\n","#A  @(#)$Id: splitprim,v 1.1 2000/01/18 19:15:30 ahulpke Exp $\n","##\n",
"#Y  Copyright (C) 1999, School of Math.&Comp. Sci. University of St Andrews\n",
  "##\n","##  This file contains part of the primitive groups library\n","##\n",
  "Revision.",ReplacedString(fnam,".","_"),":=\n  \"@(#)$Id: splitprim,v 1.1 2000/01/18 19:15:30 ahulpke Exp $\";\n\n");
for i in [1..Length(l)] do
  if IsBound(l[i]) then
    Add(PRIMNUMS[i],id); # note in which file everything is stored
    AppendTo("/tmp/emilschlonz","PRIMGRP[",i,"]:=",l[i],";\n");
  fi;
od;
  #Exec("sed \"13,$ s/true/T/g\" /tmp/emilschlonz > /tmp/emilschlonz1");
  #Exec("sed \"13,$ s/false/F/g\" /tmp/emilschlonz1 > /tmp/emilschlonz");
  Exec("mv /tmp/emilschlonz  /tmp/emilschlonz1");
  # get the blanks back in the group names
  Exec("sed \"13,$ s/ //g\" /tmp/emilschlonz1 > /tmp/emilschlonz");
  Exec(Concatenation("sed \"13,$ s/_@/ /g\" /tmp/emilschlonz >",fnam));

  Exec("rm /tmp/emilschlonz");
  Exec("rm /tmp/emilschlonz1");
end;

Job:=function()
local lis,fid,flush,i,t;
  SizeScreen([90,24]);
  flush:=function()
    Print("Flushing...\n");
    PrintPrimGrps(lis,fid);
    lis:=[];
    t:=0;
    fid:=fid+1;
  end;
  fid:=1;
  lis:=[];
  t:=0;
  for i in [2..1000] do
    Print("Creating Degree ",i,"\n");
    lis[i]:=CreatePrimitiveGroups(i);
    t:=t+Length(lis[i])*RootInt(i,2);
    if t>3000 then
      flush();
    fi;
    if IsInt(i/50) then
      # clean caches
      RereadLib("../prim/primitiv.gd");
      RereadLib("../prim/primitiv.gi");
      RereadLib("../prim/irredsol.grp");
    fi;
  od;
  flush();
  SizeScreen([80,24]);
end;
