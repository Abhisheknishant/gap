#############################################################################
##
#W  monoid.gd                   GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file contains the declaration of operations for monoids.
##
Revision.monoid_gd :=
    "@(#)$Id$";


#############################################################################
##
#P  IsMonoid( <D> )
##
##  A monoid is an associative magma-with-one.
##
DeclareSynonymAttr( "IsMonoid", IsMagmaWithOne and IsAssociative );


#############################################################################
##
#A  GeneratorsOfMonoid( <M> )
##
DeclareSynonymAttr( "GeneratorsOfMonoid", GeneratorsOfMagmaWithOne );


#############################################################################
##
#A  AsMonoid( <D> ) . . . . . . . . . . . . . . . . . . .  view <D> as monoid
##
DeclareAttribute( "AsMonoid", IsCollection );


#############################################################################
##
#O  AsSubmonoid( <M>, <N> ) .  view a monoid as a submonoid of another monoid
##
DeclareOperation( "AsSubmonoid", [ IsMonoid, IsMonoid ] );


#############################################################################
##
#A  TrivialSubmonoid( <M> ) . . . . . . . . . trivial submonoid of monoid <M>
##
DeclareSynonymAttr( "TrivialSubmonoid", TrivialSubmagmaWithOne );


#############################################################################
##
#O  MonoidByGenerators( <gens> ) . . . . . . . . . monoid generated by <gens>
#O  MonoidByGenerators( <gens>, <one> )
##
DeclareOperation( "MonoidByGenerators", [ IsCollection ] );


#############################################################################
##
#F  Monoid( <gen>, ... )
#F  Monoid( <obj> )
#F  Monoid( <gens>, <id> )
##
##  `Monoid( <gen>, ... )' is the monoid generated by the arguments
##  <gen>, ...
##
##  If the only argument <obj> is a list then `Monoid( <obj> )' is
##  the monoid generated by the elements of that list.
##
##  If there are two arguments, a list <gens> and an element <one>,
##  then `Monoid( <gens>, <one> )' is the monoid generated by <gens>,
##  with one <one>.
##
DeclareGlobalFunction( "Monoid" );


#############################################################################
##
#F  Submonoid( <M>, <gens> ) . . . . . . submonoid of <M> generated by <gens>
#F  SubmonoidNC( <M>, <gens> )
##
DeclareSynonym( "Submonoid", SubmagmaWithOne );

DeclareSynonym( "SubmonoidNC", SubmagmaWithOneNC );


#############################################################################
##
#F  FreeMonoid( <rank> )
#F  FreeMonoid( <rank>, <name> )
#F  FreeMonoid( <name1>, <name2>, ... )
#F  FreeMonoid( <names> )
##
##  Called in the first form, `FreeMonoid' returns a free monoid on
##  <rank> generators.
##  Called in the second form, `FreeMonoid' returns a free monoid on
##  <rank> generators, printed as `<name>1', `<name>2' etc.
##  Called in the third form, `FreeMonoid' returns a free monoid on
##  as many generators as arguments, printed as <name1>, <name2> etc.
##  Called in the fourth form, `FreeMonoid' returns a free monoid on
##  as many generators as the length of the list <names>, the $i$-th
##  generator being printed as `<names>[$i$]'.
##
DeclareGlobalFunction( "FreeMonoid" );


#############################################################################
##
#E  monoid.gd . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here

