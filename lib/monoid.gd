#############################################################################
##
#W  monoid.gd                   GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1997,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
##
##  This file contains the declaration of operations for monoids.
##
Revision.monoid_gd :=
    "@(#)$Id$";


#############################################################################
##
#P  IsMonoid( <D> )
##
##  A monoid is an associative magma-with-one.
##
IsMonoid := IsMagmaWithOne and IsAssociative;
SetIsMonoid := Setter( IsMonoid );
HasIsMonoid := Tester( IsMonoid );


#############################################################################
##
#A  GeneratorsOfMonoid( <M> )
##
GeneratorsOfMonoid := GeneratorsOfMagmaWithOne;
SetGeneratorsOfMonoid := SetGeneratorsOfMagmaWithOne;
HasGeneratorsOfMonoid := HasGeneratorsOfMagmaWithOne;


#############################################################################
##
#A  AsMonoid( <D> ) . . . . . . . . . . . . . . . . . . .  view <D> as monoid
##
AsMonoid := NewAttribute( "AsMonoid", IsCollection );
SetAsMonoid := Setter( AsMonoid );
HasAsMonoid := Tester( AsMonoid );


#############################################################################
##
#O  AsSubmonoid( <M>, <N> ) .  view a monoid as a submonoid of another monoid
##
AsSubmonoid := NewOperation( "AsSubmonoid", [ IsMonoid, IsMonoid ] );


#############################################################################
##
#A  TrivialSubmonoid( <M> ) . . . . . . . . . trivial submonoid of monoid <M>
##
TrivialSubmonoid := TrivialSubmagmaWithOne;
SetTrivialSubmonoid := SetTrivialSubmagmaWithOne;
HasTrivialSubmonoid := HasTrivialSubmagmaWithOne;


#############################################################################
##
#O  MonoidByGenerators( <gens> ) . . . . . . . . . monoid generated by <gens>
#O  MonoidByGenerators( <gens>, <one> )
##
MonoidByGenerators := NewOperation( "MonoidByGenerators",
    [ IsCollection ] );
#T 1997/01/16 fceller was old 'NewConstructor'


#############################################################################
##
#F  Monoid( <gen>, ... )
#F  Monoid( <obj> )
#F  Monoid( <gens>, <id> )
##
##  'Monoid( <gen>, ... )' is the monoid generated by the arguments
##  <gen>, ...
##
##  If the only argument <obj> is a list then 'Monoid( <obj> )' is
##  the monoid generated by the elements of that list.
##
##  If there are two arguments, a list <gens> and an element <one>,
##  then 'Monoid( <gens>, <one> )' is the monoid generated by <gens>,
##  with one <one>.
##
Monoid := NewOperationArgs( "Monoid" );


#############################################################################
##
#F  Submonoid( <M>, <gens> ) . . . . . . submonoid of <M> generated by <gens>
#F  SubmonoidNC( <M>, <gens> )
##
Submonoid := SubmagmaWithOne;

SubmonoidNC := SubmagmaWithOneNC;


#############################################################################
##
#F  FreeMonoid( <rank> )
#F  FreeMonoid( <rank>, <name> )
#F  FreeMonoid( <name1>, <name2>, ... )
#F  FreeMonoid( <names> )
##
##  Called in the first form, 'FreeMonoid' returns a free monoid on
##  <rank> generators.
##  Called in the second form, 'FreeMonoid' returns a free monoid on
##  <rank> generators, printed as '<name>1', '<name>2' etc.
##  Called in the third form, 'FreeMonoid' returns a free monoid on
##  as many generators as arguments, printed as <name1>, <name2> etc.
##  Called in the fourth form, 'FreeMonoid' returns a free monoid on
##  as many generators as the length of the list <names>, the $i$-th
##  generator being printed as '<names>[$i$]'.
##
FreeMonoid := NewOperationArgs( "FreeMonoid" );


#############################################################################
##
#E  monoid.gd . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here



