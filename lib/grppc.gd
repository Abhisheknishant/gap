#############################################################################
##
#W  grppc.gd                    GAP Library                      Frank Celler
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1996,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
#Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
##
##  This file contains the operations for groups with a polycyclic collector.
##
##  IsPcgs
##    a polycyclic generating system, also behaves like a pc sequence
##
##  IsPcGroup
##    a poylcyclic group whose elements family is defined by a collector
##
##  CanEasilyComputePcgs
##    a group that knows how to compute a pcgs relatively fast
##
##  HasDefiningPcgs
##    a group whose elements family is generated by a pcgs
##
##  HasHomePcgs
##    a group that knows a pcgs of a super group
##
Revision.grppc_gd :=
    "@(#)$Id$";

DeclareInfoClass("InfoPcGroup");


#############################################################################
##
#A  CanonicalPcgsWrtFamilyPcgs( <grp> )	. . . . . . .  with respect to family
##
DeclareAttribute( "CanonicalPcgsWrtFamilyPcgs", IsGroup );



#############################################################################
##
#A  CanonicalPcgsWrtHomePcgs( <grp> ) . . . . . . . . .  with respect to home
##
DeclareAttribute( "CanonicalPcgsWrtHomePcgs", IsGroup );



#############################################################################
##
#A  FamilyPcgs( <grp> ) . . . . . . . . . . . . . . . . .  pcgs of the family
##
DeclareAttribute( "FamilyPcgs", IsGroup );


InstallSubsetMaintainedMethod( FamilyPcgs, IsGroup, IsGroup );


#############################################################################
##
#A  HomePcgs( <grp> ) . . . . . . . . . . . . . . . . . . .  pcgs of the home
##
DeclareAttribute( "HomePcgs", IsGroup );


InstallSubsetMaintainedMethod( HomePcgs, IsGroup, IsGroup );


#############################################################################
##
#A  InducedPcgsWrtFamilyPcgs( <grp> ) . . . . . . . .  with respect to family
##
DeclareAttribute( "InducedPcgsWrtFamilyPcgs", IsGroup );


#############################################################################
##
#O  InducedPcgs( <pcgs>, <grp> )
##
##  computes a pcgs for <group> which is induced by (the parent of) <pcgs>.
DeclareOperation( "InducedPcgs", [IsPcgs,IsGroup] );


#############################################################################
##
#A  InducedPcgsWrtHomePcgs( <grp> ) . . . . . . . . . .  with respect to home
##
##  returns an induced pcgs for <grp> with respect to the home pcgs.
DeclareAttribute(
    "InducedPcgsWrtHomePcgs",
    IsGroup );



#############################################################################
##
#A  Pcgs( <grp> ) . . . . . . . . . . . . . . . . . . . . . . pcgs of a group
##
##  returns a pcgs for <grp>. If <grp> is not solvable it returns `fail'
##  *and this result is not stored as attribute value*!
DeclareAttribute( "Pcgs", IsGroup );



#############################################################################
##
#F  CanEasilyComputePcgs( <grp> ) . . . . .  group is willing to compute pcgs
##
##  This filter indicates whether a group can compute a pcgs comparatively
##  cheaply. A group of this sort must be solvable, but not every solvable
##  group can compute a pcgs cheaply. The reason for this is that some
##  groups may be known to be solvable but still cannot compute a pcgs
##  cheaply. It is used in the method selection to decide for algorithms
##  that require a Pcgs.
##  The willingness of GAP may change over time, depending which further
##  information is known. Therefore this is not implemented as a property,
##  but as a filter.
##
DeclareFilter( "CanEasilyComputePcgs" );

# to satisfy method installation requirements
InstallTrueMethod(IsGroup,CanEasilyComputePcgs);

#############################################################################
##
#M  CanEasilyComputePcgs( <pcgrp> ) . . . . . . . . . . . . . . . .  pc group
##
InstallTrueMethod(
    CanEasilyComputePcgs,
    IsPcGroup );

InstallTrueMethod(
    CanEasilyComputePcgs,
    HasPcgs );

#############################################################################
##
#M  CanEasilyComputePcgs( <grp> ) . . . . . . . . . home or family pcgs known
##
InstallTrueMethod( CanEasilyComputePcgs, IsGroup and HasHomePcgs );
InstallTrueMethod( CanEasilyComputePcgs, IsGroup and HasFamilyPcgs );

#############################################################################
##
#M  CanEasilyComputePcgs( <grp> ) . . . . . . . . . subset or factor relations
##
#T  As CanEasilyComputePcgs is a filter and not a property, we cannot use
##  'InstallSubsetMaintainedMethod', but have to do this 'by hand'.
InstallMethod(UseSubsetRelation,"inherit 'CanEasilyComputePcgs' to subgroups",
              IsIdenticalObj,[IsGroup and CanEasilyComputePcgs,IsGroup],0,
function(super,sub)
  SetFilterObj(sub,CanEasilyComputePcgs);
  TryNextMethod();
end);

#T  factor groups might be in a different representation and therefore should
#T  not become 'CanEasilyComputePcgs' automatically.


#############################################################################
##
#P  IsPcgsElementaryAbelianSeries( <pcgs> )
##
##  indicates whether <pcgs> refines an elementary abelian series.
##  If this is the case, `IndicesNormalSteps' gives the indices of the pc
##  elements, which start a new step in the descending elementary abelian
##  series.
DeclareProperty(
  "IsPcgsElementaryAbelianSeries", IsPcgs );

InstallTrueMethod(IsPcgsElementaryAbelianSeries,IsSpecialPcgs);

#############################################################################
##
#A  PcgsElementaryAbelianSeries( <G> )
##
##  computes a pcgs for <G> that refines an elementary abelian series. See
##  `IsPcgsElementaryAbelianSeries'.
##
DeclareAttribute( "PcgsElementaryAbelianSeries",
  IsGroup );

#############################################################################
##
#P  IsPcgsCentralSeries( <pcgs> )
##
##  indicates whether <pcgs> refines a central series.
##  If this is the case, `IndicesNormalSteps' gives the indices of the pc
##  elements, which start a new elementary abelian step in the descending
##  central series.
DeclareProperty( "IsPcgsCentralSeries", IsPcgs );

InstallTrueMethod(IsPcgsCentralSeries,IsSpecialPcgs);

#############################################################################
##
#A  PcgsCentralSeries( <G> )
##
##  computes a pcgs for <G> that refines a central series. See
##  `IsPcgsCentralSeries'.
##
DeclareAttribute( "PcgsCentralSeries", IsGroup );


#############################################################################
##
#P  IsPcgsPCentralSeriesPGroup( <pcgs> )
##
##  indicates whether <pcgs> refines a p-central series in a p group.
##  If this is the case, `IndicesNormalSteps' gives the indices of the pc
##  elements, which start a new elementary abelian step in the descending
##  p-central series.
DeclareProperty( "IsPcgsPCentralSeriesPGroup", IsPcgs );

#############################################################################
##
#A  PcgsPCentralSeriesPGroup( <G> )
##
##  computes a pcgs for <G> that refines a central series. See
##  `IsPcgsCentralSeries'.
##
DeclareAttribute( "PcgsPCentralSeriesPGroup", IsGroup );


#############################################################################
##
#O  SubgroupByPcgs( <G>, <pcgs> )
##
DeclareOperation( "SubgroupByPcgs", [IsGroup, IsPcgs] );


#############################################################################
##
#O  AffineOperation( <gens>, <basisvectors>, <linear>, <transl> )
##
DeclareOperation(
    "AffineOperation", 
    [ IsList, IsMatrix, IsFunction, IsFunction ] );


#############################################################################
##
#O  LinearOperation( <gens>, <basisvectors>, <linear> )
##
DeclareOperation(
    "LinearOperation",
    [ IsList, IsMatrix, IsFunction ] );


#############################################################################
##
#M  IsSolvableGroup
##
InstallTrueMethod(
    IsSolvableGroup,
    IsPcGroup );


#############################################################################
##
#F  AffineOperationLayer( <G>, <gens>, <pcgs>, <transl> )
##
DeclareGlobalFunction( "AffineOperationLayer" );


#############################################################################
##
#F  GeneratorsCentrePGroup( <G> )
##
DeclareGlobalFunction( "GeneratorsCentrePGroup" );


#############################################################################
##
#F  LinearOperationLayer( <G>, <gens>, <pcgs> )
##
DeclareGlobalFunction( "LinearOperationLayer" );


#############################################################################
##
#F  VectorSpaceByPcgsOfElementaryAbelianGroup( <pcgs>, <fld> )
##
DeclareGlobalFunction(
    "VectorSpaceByPcgsOfElementaryAbelianGroup" );

#############################################################################
##
#F  GapInputPcGroup( <grp>, <string> )
##
DeclareGlobalFunction( "GapInputPcGroup" );

#############################################################################
##
#O  CanonicalSubgroupRepresentativePcGroup( <G>, <U> )
##
DeclareGlobalFunction( "CanonicalSubgroupRepresentativePcGroup" );


#############################################################################
##
#A  OmegaSeries( G )
##
DeclareAttribute( "OmegaSeries", IsGroup );

#############################################################################
##
#E  grppc.gd  . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here
##
