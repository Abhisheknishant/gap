#############################################################################
##
#W  vspc.gd                     GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1996,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
##
##  This file declares the operations for vector spaces.
##
##  The operations for bases of free left modules can be found in the file
##  'basis.g'.
##
Revision.vspc_gd :=
    "@(#)$Id$";


#############################################################################
##
#C  IsLeftOperatorRing
##
IsLeftOperatorRing :=     IsLeftOperatorAdditiveGroup
                      and IsRing
                      and IsAssociativeLOpDProd;
#T really?


#############################################################################
##
#C  IsLeftOperatorUnitalRing
##
IsLeftOperatorUnitalRing :=     IsLeftOperatorAdditiveGroup
                            and IsUnitalRing
                            and IsAssociativeLOpDProd;
#T really?


#############################################################################
##
#C  IsLeftVectorSpace( <D> )
#C  IsVectorSpace( <D> )
##
##  A (left) vector space in {\GAP} is an additive group that is acted on by
##  a division ring from the left such that this action and the addition are
##  left and right distributive.
##
##  (Vector spaces in {\GAP} are always left vector spaces.)
##
IsLeftVectorSpace := IsLeftModule and IsLeftActedOnByDivisionRing;

IsVectorSpace := IsLeftVectorSpace;

InstallTrueMethod( IsFreeLeftModule,
    IsLeftModule and IsLeftActedOnByDivisionRing );


#############################################################################
##
#C  IsGaussianSpace( <V> )
##
##  A vector space is Gaussian if it allows Gaussian elimination;
##  this is used for row vector spaces and matrix vector spaces.
##
IsGaussianSpace := NewCategory( "IsGaussianSpace", IsVectorSpace );


#############################################################################
##
#P  IsDivisionRing( <D> )
##
##  A division ring in {\GAP} is an associative algebra <D> with a
##  multiplicative inverse for each nonzero element.
##
##  Note that being a division ring is thus not a property that a ring can
##  get, because a ring is usually not represented as a vector space.
##
IsDivisionRing :=     IsLeftVectorSpace
                  and IsLeftOperatorRing
                  and IsAssociative
                  and IsMagmaWithInversesAndZero;
SetIsDivisionRing := Setter( IsDivisionRing );
HasIsDivisionRing := Tester( IsDivisionRing );


#############################################################################
##
#A  GeneratorsOfLeftVectorSpace( <V> )
#A  GeneratorsOfVectorSpace( <V> )
##
GeneratorsOfLeftVectorSpace := GeneratorsOfLeftOperatorAdditiveGroup;
SetGeneratorsOfLeftVectorSpace := SetGeneratorsOfLeftOperatorAdditiveGroup;
HasGeneratorsOfLeftVectorSpace := HasGeneratorsOfLeftOperatorAdditiveGroup;

GeneratorsOfVectorSpace := GeneratorsOfLeftOperatorAdditiveGroup;
SetGeneratorsOfVectorSpace := SetGeneratorsOfLeftOperatorAdditiveGroup;
HasGeneratorsOfVectorSpace := HasGeneratorsOfLeftOperatorAdditiveGroup;


#############################################################################
##
#A  CanonicalBasis( <V> )
##
CanonicalBasis := NewAttribute( "CanonicalBasis", IsFreeLeftModule );
SetCanonicalBasis := Setter( CanonicalBasis );
HasCanonicalBasis := Tester( CanonicalBasis );


#############################################################################
##
#A  NormedVectors( <V> )  . . . . . . . list of normed vectors in a space <V>
##
##  (This function makes only sense for Gaussian vector spaces.)
##
NormedVectors := NewAttribute( "NormedVectors", IsGaussianSpace );


#############################################################################
##
#A  TrivialSubspace( <V> )
##
TrivialSubspace := TrivialSubmodule;
SetTrivialSubspace := SetTrivialSubmodule;
HasTrivialSubspace := HasTrivialSubmodule;


#############################################################################
##
#O  AsSubspace( <V>, <U> )  . . . . . . . . . . . view <U> as subspace of <V>
##
AsSubspace := NewOperation( "AsSubspace", [ IsVectorSpace, IsVectorSpace ] );


#############################################################################
##
#O  AsVectorSpace( <F>, <D> ) . . . . . . . . .  view <D> as <F>-vector space
##
AsVectorSpace := AsLeftModule;


#############################################################################
##
#F  VectorSpace( <F>, <gens> )
#F  VectorSpace( <F>, <gens>, <zero> )
#F  VectorSpace( <F>, <gens>, "basis" )
#F  VectorSpace( <F>, <gens>, <zero>, "basis" )
##
VectorSpace := FreeLeftModule;


#############################################################################
##
#F  Subspace( <V>, <gens> ) . . . . . . . subspace of <V> generated by <gens>
##
##  is the vector space generated by <gens>, with parent space <V>.
##
#F  Subspace( <V>, <gens>, "basis" )
##
##  is the subspace of <V> for that <gens> is a list of basis vectors.
##  It is *not* checked whether <gens> really are linearly independent
##  and whether all in <gens> lie in <V>.
##
Subspace := Submodule;


#############################################################################
##
#F  SubspaceNC( <V>, <gens> )
#F  SubspaceNC( <V>, <gens>, "basis" )
##
##  'SubspaceNC' does the same as 'Subspace', except that it does not check
##  whether all in <gens> lie in <V>.
##
SubspaceNC := SubmoduleNC;


#############################################################################
##
#F  Intersection2Spaces( <AsStruct>, <Substruct>, <Struct> )
##
##  is a function that takes two arguments <V> and <W> which must be finite
##  dimensional vector spaces, and returns the intersection of <V> and <W>.
##
##  If the left acting domains are different then let $F$ be their
##  intersection.
##  The intersection of <V> and <W> is computed as intersection of
##  '<AsStruct>( <F>, <V> )' and '<AsStruct>( <F>, <V> )'.
##
##  If the left acting domains are equal to $F$ then the intersection of <V>
##  and <W> is returned either as $F$-<Substruct> with the common parent of
##  <V> and <W> or as $F$-<Struct>, in both cases with knwon basis.
##
##  This function is used to handle the intersections of two vector spaces,
##  two algebras, two unital algebras, two left ideals, two right ideals,
##  two two-sided ideals.
##
Intersection2Spaces := NewOperationArgs( "Intersection2Spaces" );


#############################################################################
##
#F  FullRowSpace( <F>, <n> )
##
FullRowSpace := FullRowModule;


#############################################################################
##
#O  SubspacesDim( <V>, <dim> )
#A  SubspacesAll( <V> )
##
SubspacesDim := NewOperation( "SubspacesDim", [ IsVectorSpace, IS_INT ] );
SubspacesAll := NewAttribute( "SubspacesAll", IsVectorSpace );


#############################################################################
##
#F  Subspaces( <V> )
#F  Subspaces( <V>, <k> )
##
##  is the domain of (<k>-dimensional) subspaces of <V>.
##
Subspaces := NewOperationArgs( "Subspaces" );


#############################################################################
##
#P  IsVectorSpaceHomomorphism( <map> )
##
##  A mapping $f$ is a vector space homomorphism (or linear mapping) if
##  the source and range are vector spaces over the same division ring $D$,
##  and if $f( a + b ) = f(a) + f(b)$ and $f( s \* a ) = s \* f(a)$ hold
##  for all elements $a$, $b$ in the source of $f$ and $s \in D$.
##
IsVectorSpaceHomomorphism := NewProperty( "IsVectorSpaceHomomorphism",
                                          IsGeneralMapping );


#############################################################################
##
#E  vspc.gd . . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here



