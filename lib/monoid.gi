#############################################################################
##
#W  monoid.gi                   GAP library                     Thomas Breuer
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1996,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
##
##  This file contains generic methods for monoids.
##
Revision.monoid_gi :=
    "@(#)$Id$";


#############################################################################
##
#M  Print( <M> )  . . . . . . . . . . . . . . . . . . . . . .  print a monoid
##
InstallMethod( PrintObj, true,
    [ IsMonoid and HasParent and HasGeneratorsOfMonoid ], 0,
    function( M )
    Print( "Submonoid( ", Parent( M ), ", ", GeneratorsOfMonoid( M ), " )" );
    end );

InstallMethod( PrintObj, true, [ IsMonoid and HasParent ], 0,
    function( M )
    Print( "Submonoid( ", Parent( M ), ", ... )" );
    end );

InstallMethod( PrintObj, true, [ IsMonoid and HasGeneratorsOfMonoid ], 0,
    function( M )
    Print( "Monoid( ", GeneratorsOfMagmaWithOne( M ), ", ... )" );
    end );

InstallMethod( PrintObj, true, [ IsMonoid ], 0,
    function( M )
    Print( "Monoid( ... )" );
    end );


#############################################################################
##
#M  NiceMonoid( <M> ) . . . . . . . . . . . . . nice monoid isomorphic to <M>
##
InstallMethod( NiceMonoid, true, [ IsMonoid ], 0, IdFunc );


#############################################################################
##
#M  MonoidByGenerators( <gens> )  . . . . . . . .  monoid generated by <gens>
##
InstallOtherMethod( MonoidByGenerators, true, [ IsCollection ] , 0,
    function( gens )
    local M;
    M:= Objectify( NewKind( FamilyObj( gens ),
                            IsMonoid and IsAttributeStoringRep ),
                   rec() );
    SetGeneratorsOfMagmaWithOne( M, AsList( gens ) );
    return M;
    end );

InstallOtherMethod( MonoidByGenerators, IsCollsElms,
    [ IsCollection, IsMultiplicativeElementWithOne ], 0,
    function( gens, id )
    local M;
    M:= Objectify( NewKind( FamilyObj( gens ),
                            IsMonoid and IsAttributeStoringRep ),
                   rec() );
    SetGeneratorsOfMagmaWithOne( M, AsList( gens ) );
    SetOne( M, Immutable( id ) );
    return M;
    end );

InstallOtherMethod( MonoidByGenerators, true,
    [ IsEmpty, IsMultiplicativeElementWithOne ], 0,
    function( gens, id )
    local M;
    M:= Objectify( NewKind( CollectionsFamily( FamilyObj( id ) ),
                            IsMonoid and IsAttributeStoringRep ),
                   rec() );
    SetGeneratorsOfMagmaWithOne( M, AsList( gens ) );
    SetOne( M, Immutable( id ) );
    return M;
    end );


#############################################################################
##
#M  AsMonoid( <M> ) . . . . . . . . . . . . . . . . view a monoid as a monoid
##
InstallMethod( AsMonoid, true, [ IsMonoid ], 0, IdFunc );


#############################################################################
##
#M  IsCommutative( <M> ) . . . . . . . . . .  test if a monoid is commutative
##
InstallMethod( IsCommutative, true, [ IsMagmaWithOne and IsAssociative ], 0,
    IsCommutativeFromGenerators( GeneratorsOfMagmaWithOne ) );


#############################################################################
##
#M  TrivialSubmonoid( <M> ) . . . . . . . . . . trivial submonoid of a monoid
##
InstallMethod( TrivialSubmonoid, true, [ IsMonoid ], 0,
    M -> SubmonoidNC( M, [] ) );


#############################################################################
##
#F  Monoid( <gen>, ... )
#F  Monoid( <obj> )
#F  Monoid( <gens>, <id> )
##
Monoid := function( arg )

    # special case for matrices, because they may look like lists
    if Length( arg ) = 1 and IsMatrix( arg[1] ) then
      return MonoidByGenerators( [ arg[1] ] );

    # special case for matrices, because they may look like lists
    elif Length( arg ) = 2 and IsMatrix( arg[1] ) then
      return MonoidByGenerators( arg );

    # list of generators
    elif Length( arg ) = 1 and IsList( arg[1] ) and 0 < Length( arg[1] ) then
      return MonoidByGenerators( arg );

    # list of generators plus identity
    elif Length( arg ) = 2 and IsList( arg[1] ) then
      return MonoidByGenerators( arg[1], arg[2] );

    # generators
    elif 0 < Length( arg ) then
      return MonoidByGenerators( arg );

    # no argument given, error
    else
      Error("usage: Monoid(<gen>,...), Monoid(<gens>), Monoid(<D>)");
    fi;
end;


#############################################################################
##
#F  Submonoid( <M>, <gens> ) . . . . . . submonoid of <M> generated by <gens>
##
Submonoid := function( M, gens )
    local S;
    if not IsMonoid( M ) then
      Error( "<M> must be a monoid" );
    elif IsEmpty( gens ) then
      return TrivialSubmonoid( M );
    elif     IsHomogeneousList( gens )
         and IsIdentical( FamilyObj( M ), FamilyObj( gens ) )
         and ForAll( gens, m -> m in M ) then
      S:= MonoidByGenerators( gens );
      SetParent( S, M );
      return S;
    else
      Error( "<gens> must be a list of elements in <M>" );
    fi;
end;


#############################################################################
##
#F  SubmonoidNC( <M>, <gens> )
##
SubmonoidNC := function( M, gens )
    local S;
    if IsEmpty( gens ) then
      S:= Objectify( NewKind( FamilyObj( M ),
                              IsMonoid and IsAttributeStoringRep ),
                     rec() );
      SetGeneratorsOfMagmaWithOne( S, AsList( gens ) );
    else
      S:= MonoidByGenerators( gens );
    fi;
    SetParent( S, M );
    return S;
end;


#############################################################################
##
#E  monoid.gi . . . . . . . . . . . . . . . . . . . . . . . . . . . ends here



