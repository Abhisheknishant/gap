README file for GAPSock


1. Demonstration of GAPSock server
----------------------------------

a) Open two clients.

b) Assign an OM integer to variable "a" in client 0

<OMOBJ>
        <OMI>
        912873912381273891
        </OMI>
</OMOBJ>


Assign an OM group to variable "a" in client 1

<OMOBJ>
        <OMA>
                <OMS cd="group1" name="Group"/>
                <OMA>
                        <OMS cd="permut1" name="Permutation"/>
                        <OMI> 2 </OMI>
                        <OMI> 3 </OMI>
                        <OMI> 1 </OMI>
                </OMA>
        </OMA>
</OMOBJ>

Retrieve both "a"'s showing that they haven't interfered.

c) A computation: find the character table of a group

<OMOBJ>
        <OMA>
                <OMS cd="group1" name="CharacterTable"/>
                <OMA>
                        <OMS cd="group1" name="Group"/>
                        <OMA>
                                <OMS cd="permut1" name="Permutation"/>
                                <OMI> 2 </OMI>
                                <OMI> 3 </OMI>
                                <OMI> 1 </OMI>
                        </OMA>
                        <OMA>   
                                <OMS cd="permut1" name="Permutation"/>
                                <OMI> 2 </OMI>
                                <OMI> 1 </OMI>
                        </OMA>  
                </OMA>
        </OMA>
</OMOBJ>



d) A function of two arguments: find the size of the
Sylow 3-subgroup of Sym(3)

function(group, prime)
        return Size(SylowSubgroup(group, prime));
end;

2. Design
---------
The server is GAPSockMultiServer. It starts GAP and listens on port 4444
for the client request, then spawns a gapThread for dealing with the
client requests. The protocol is a cycle of reading the string 
"Ready" from the server, issuing a command string (one of
"AssignData", "AssignCode", "AssignExecute", "Retrieve",
"EndSession") together with any arguments, then reading the 
GAPoutput (whatever GAP echoes) and then the OMoutput if any
is expected. This cycle is a rather "hand made" protocol
which should probably be replaced by RMI.

This whole protocol is encapsulated in the GAPclient
(openmath/beans/GAPclient) classes and they should 
be used in preference, so that the code using the 
GAP server will not break when the protocol is changed.




