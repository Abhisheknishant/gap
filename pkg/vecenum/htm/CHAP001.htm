<html><head><title>[Example] 1 The Vecenum Package</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>1 The Vecenum Package</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP001.htm#SECT001">The main functions</a>
<li> <A HREF="CHAP001.htm#SECT002">Parameters</a>
</ol><p>
<p>
<a name = "I0"></a>

This chapter  describes  the  <font face="Gill Sans,Helvetica,Arial">GAP</font>  package  <font face="Gill Sans,Helvetica,Arial">Vecenum</font>, which
provides a <font face="Gill Sans,Helvetica,Arial">GAP</font> implementation of the vector enumeration algorithm.
<p>
<strong>Warning</strong> this is, at best, alpha-quality code at the moment.
<p>
See Sections&nbsp;<a href="badlink:Example:Installing the Vecenum Package">Installing the Vecenum Package</a>  and&nbsp;<a href="badlink:Example:Loading the Vecenum Package">Loading  the  Vecenum Package</a> for how to install and load the <font face="Gill Sans,Helvetica,Arial">Vecenum</font> package.
<p>
If you are viewing this with on-line help, type: 
<p>
<pre>
gap&gt; ?&gt;
</pre>
<p>
to see the functions provided by the <font face="Gill Sans,Helvetica,Arial">Vecenum</font> package.
<p>
<p>
<h2><a name="SECT001">1.1 The main functions</a></h2>
<p><p>
The following functions are available:
<p>
<li><code>ME.create(</code><var>free-module</var><code>, </code><var>module-rels</var><code> [,</code><var>options-record</var><code>]) F</code>
<p>
Initialises the vector enumeration data structures. <var>free-module</var>
should be a free module for a finitely-presented associative
algebra (call it <var>A</var>). <var>module-rels</var> is a (possibly empty) list of elements of
<var>free-module</var>. The computation will, if successful, construct the
action of the fp associative algebra <var>A</var> on the quotient of
<var>free-module</var> by the sub-<var>A</var>-module generated by <var>module-rels</var>.
<p>
The optional third argument is a record, which may be used to override
the default choices for a number of parameters controlling the enumeration.
<p>
This function returns a record called the vector enumeration universe,
which encapsulates the entire state of a vector enumeration in progress.
<p>
<li><code>ME.run( </code><var>universe</var><code> ) F</code>
<p>
runs the computation, updating <var>universe</var> to reflect its progress,
and, hopefully, conclusion.
<p>
<li><code>ME.extract( </code><var>universe</var><code> ) F</code>
<p>
This function should be applied only when the computation has
terminated. It returns a record with the following components:
<p>
<p>
<dl compact>
<dt>mats <dd> a list of matrices giving the action of the generators of the
fp associative algebra, on an implied row-space.
<p>
<dt>ims <dd> a list of vectors giving the images of the generators of the
free module in the implied row-space
<p>
<dt>preims <dd> a list of elements of the free module which are pre-image
representatives for the basis of the implied row-space
<p>
<dt>lattice <dd> (only if the algebra is not defined over a
field). Generators for a sub-lattice of the implied row-space, stable
under the action given by mats. In this case, the specified module is
(isomorphic to) the quotient of the row-space by this lattice.
</dl>
<p>
This interface is intended to remain stable, although extra record
components in the result may be
added in the future, as well as higher level interfaces
<p>
<pre>
gap&gt; a := FreeAssociativeAlgebraWithOne(Integers,1);
&lt;free left module over Integers, and ring-with-one, with 1 generators&gt;
gap&gt; r1 := 2*a.1 - One(a);
(-1)*&lt;identity ...&gt;+(2)*x.1
gap&gt; r2 := a.1^7 - One(a);
(-1)*&lt;identity ...&gt;+(1)*x.1^7
gap&gt; b := FactorFreeAlgebraByRelators(a,[r1,r2]);
&lt;algebra over Integers, with 2 generators&gt;
gap&gt; m := b^1;
( &lt;algebra over Integers, with 2 generators&gt;^1 )
gap&gt; u := ME.create(m,[]);
rec( 
  table := [ rec( deleted := false, images := [  ], defin := [ [ [(1)*&lt;identit\
y ...&gt;] ] ] ) ], fpalg := &lt;algebra over Integers, with 2 generators&gt;, 
  ngens := 1, basering := Integers, one := 1, zero := 0, modrels := [  ], 
  freemod := ( &lt;algebra over Integers, with 2 generators&gt;^1 ), 
  compress := function( v ) ... end, coincs := [  ], 
  isunit := function( x ) ... end, lattice := [  ], lpivots := [  ], 
  lclosed := [  ] )
gap&gt; ME.run(u);
gap&gt; ME.extract(u);
rec( mats := [ [ [ 64 ] ] ], ims := [ [ 1 ] ], 
  preims := [ [ [(1)*&lt;identity ...&gt;] ] ], lattice := [ [ 127 ] ] )
</pre>
<p>
<p>
<h2><a name="SECT002">1.2 Parameters</a></h2>
<p><p>
Each of these parameters has a default value, which can be found in
<code>ME.defaultOpts</code>. To override one or more of them, supply a record with
appropriate components to <code>ME.create</code>. 
<p>
<p>
<dl compact>
<dt>useMonoidRels<dd> If set to true (the default), the enumerator will detect and handle
specially algebra relations of the form '<var>monomial</var> - 1'. This special
handling includes using monomials of length 2 to deduce inverses for
generators and more efficient tracing.
<p>
<dt>defineInverses<dd> If set to true (the default) the enumerator will
automatically fill in entries for inverse generators when defining new
basis elements
<p>
<dt>sparse<dd> This can be set to "always", "not8bit" (the default), or
"never" and controls for which base rings sparse vector representations
will be used. "not8bit" chooses the dense (packed) representation for
finite fields of order up to 256 and sparse representation otherwise
<p>
<dt>lookahead<dd> If set to true (the default) the enumeration will use
lookahead to try and control the number of rows defined
</dl>
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>Example manual<br>July 2006
</address></body></html>