#!/bin/sh
#############################################################################
##
#W  xpl2gap                    GAP utilities                    Thomas Breuer
##
#H  @(#)$Id: xpl2gap,v 1.4 2001/10/16 16:24:36 gap Exp $
##
#Y  Copyright (C)  2001,  Lehrstuhl D fuer Mathematik,  RWTH Aachen,  Germany
##
##  This script produces a {\GAP} input file from an example file given as
##  first argument.
##
##  It must be called in the form `xpl2gap <infile> <header> <outfile>',
##  where <infile> is the input file, <header> contains header and footer
##  (They are expected to be separated by a line containing
##  ``Here the code is added''.), and <outfile> is the output file.
##
##  Remove the leading prompts from code enclosed by \begingap and \endgap,
##  leave out other lines.
##
gawk --traditional \
    -v "INFILE=$1" -v "HEADER=$2" \
    'BEGIN {
         # Get the header of the file.
         printf( "# This file was created from %s, do not edit!\n", INFILE )
         while ( getline < HEADER && $0 !~ /Here the code is added/ ) {
             # The suffix .hea may be forced by CVS, replace it by .g.
             if ( $0 !~ /.hea/ ) {
                 print( $0 );
             }
             else {
                 printf( "%s%s%s\n",
                         substr( $0, 1, index( $0, ".hea" )-1 ),
                         ".g",
                         substr( $0, index( $0, ".hea" )+4 ) );
             }
         }
     }

     # In each block of lines between \begingap and \endgap, remove prompts.
     /^\\begingap/ {
         getline
         if ( $0 ~ /begingap/ ) {
             printf( "Error, already in GAP code!\n" )
         }
         while ( substr( $0, 1, 7 ) != "\\endgap" ) {
             if ( substr( $0, 1, 5 ) == "gap> " ) {
                 print( substr( $0, 6 ) );
             }
             if ( substr( $0, 1, 2 ) == "> " ) {
                 print( substr( $0, 3 ) );
             }
             if ( substr( $0, 1, 1 ) == "#" ) {
                 print( $0 );
             }
             getline
         }
         printf( "\n\n" )
         getline;
         while ( substr( $0, 1, 9 ) == "\\begingap" ) {
             getline
             if ( $0 ~ /begingap/ ) {
                 printf( "Error, already in GAP code!\n" )
             }
             while ( substr( $0, 1, 7 ) != "\\endgap" ) {
                 if ( substr( $0, 1, 5 ) == "gap> " ) {
                     print( substr( $0, 6 ) );
                 }
                 if ( substr( $0, 1, 2 ) == "> " ) {
                     print( substr( $0, 3 ) );
                 }
                 if ( substr( $0, 1, 1 ) == "#" ) {
                     print( $0 );
                 }
                 getline
             }
             printf( "\n\n" )
             getline
         }
     }

     END {
         # Get the footer of the file.
         while ( getline < HEADER ) {
             print $0;
         }
     }' < $1 > $3


#############################################################################
##
#E

