This file is about how to make sure that fixes will end up in a bugfix. See
bugfix.HOWTO on how to wrap up a fix.


For a correction to be part of the next bugfix, two things need to be done:
- The fix must be under the 4.2 branch under CVS
- The fix must be mentioned in dev/BUGFIX

(Both are necessary because nobody will go through the commit logfiles and
try to dig out the changes that should be bugfixes -- this would be hellish
work.)

I will describe how I go about ensuring this. (Other variants are possible.)

A)
Lets assume first, the bug was also in the development version (see below,
if it is only in 4R2):

- Fix the bug in 4.dev and commit the change. CVS will tell you something
  like:

unix> cvs commit morpheus.gi
checking in morpheus.gi;
/gap/CVS/GAP/4.0/lib/morpheus.gi,v  <--  morpheus.gi
new revision: 4.87; previous revision: 4.86
done

- Transfer the fix in the current release branch (for example 4R2):

Get the 4R2 version:

  unix> cvs update -r GAP4R2 morpheus.gi

One can check this with 

  unix> cvs status morpheus.gi
  [...]
  Sticky Tag:          GAP4R2 (branch: 4.81.6)
		    ^^^^^ means: this is the 4R2 branch

Transfer the change: (the numbers are the ones given by the first `commit')

  unix> cvs update -j 4.86 -j 4.87 morpheus.gi
  RCS file: /gap/CVS/GAP/4.0/lib/morpheus.gi,v
  retrieving revision 4.86
  retrieving revision 4.87
  Merging differences between 4.86 and 4.87 into morpheus.gi

If there is a warning:
  rcsmerge: warning: conflicts during merge

one needs to edit the file and search for `<<<<<<'-lines -- these are
conflicts in the file version number lines that need to be resolved.


(If you are unsure about the result, check with `cvs diff' and `cvs
status' that everything is fine). then commit the change. the commit will
go in the 4R2 branch. 

  unix> cvs commit morpheus.gi
  Checking in morpheus.gi;
  /gap/CVS/GAP/4.0/lib/morpheus.gi,v  <--  morpheus.gi
  new revision: 4.81.6.3; previous revision: 4.81.6.2
  done

Remove the sticky tag:
  unix> cvs update -A morpheus.gi

- Edit `dev/BUGFIX' to:
  o add in the first section the file(s) which have been changed.
  o List in the second section the error (if it is serious enough to warrant
    correction)
  o Give credit (if the error was reported externally)
  o If the fix requires recompilation, state this.
  o add an example to check fixedness (if possible)

*If these lines are not added, the fix might not be picked up in the next
bugfix and will not be listed in the bugfix description.*

- If possible (if you have enough disk space) get a local copy (via CVS) of the
  released version and run this to check that the bug is indeed gone.

=============================================================================

B)

If the error does not arise in the development version the bug either was
fixed alresy there (and forgotten to transfer) or is gone as a side effect
of some cleanup.
In this case one needs to work in the release branch, fix it there and
commit the change there.
You will have to edit the BUGFIX file as above.










