
                           HOWTO prepare a bugfix
=============================================================================

In these notes I assume that bugfix #2 for gap4r3 is being prepared.

0a) If the fix involves kernel changes, the kernel version number in
    `system.c' has to be updated (and system.c added to the list of changed
    files.

0) dev/BUGFIX contains information about which files have to go in the fix.

1) Make a directory (say `FIX') that looks like the GAP root directory
   (i.e., with subdirectories `lib' `src'...).

2) Prepare a file `desc2' describing the fix, put it in `FIX'. 

3) Copy all changed files from the 4R3 branch into `FIX' (so all changed files
   from `lib' go into `FIX/lib' etc. ). For this it is a good idea to 
   have a copy of gap4r3 somewhere (with all bugfixes applied), and 
   copy the files from `4R3/lib' that differ from the corresponding files
   in `gap4r3/lib' to `FIX/lib'.

4) Make new completion files in `4R3/lib', and copy those as well.

5) In `4R3/lib' there is a file `version.g'. In this file change the
   version to one containing a reference to the bugfix and (if applicable)
   the kernel version number. Copy this file to `FIX/lib'.

6) In `tst' make a test file `bugfix.tst' that checks some test examples
   for the fix (for being able to test whether the fix has been applied
   correctly). The examples for subsequent fixes can be appended, so as to
   have one file that test for all fixes.

7) In `FIX' zoo the directories that contain something (e.g., if the changed
   files are in `src', `lib', and `tom' (say), then
              zoo ah fix4r3n2.zoo lib/* src/* tom/* desc2
   will do it).

8) All files need a comment, for that the following will work:
       
            % > foreach i (lib/*)
            foreach? zoo c fix4r3n2.zoo $i <TEXTCOM
            foreach? end
   
   will work. Here TEXTCOM is a text file containing the following lines

          !TEXT!
          /END

          
9) It is possible to check whether the files in the fix have the comment
   by 
       zoo l fix4r3n2.zoo

   This should produce a list of all files in the fix, and all should have
   a `C'.


10) Apply the fix to the copy of the distribution, and try the testfile
    `bugfix.tst'.

 
11) If the kernel has changed, ask Burkhard Hoefling for new Macintosh
    binaries (b.hoefling@tu-bs.de).

12) If the kernel has changed, a new Windows binary needs to be prepared.
    For that go to the Windows machine, and go to the directory containing
    a copy of the release (e.g., \gap\testcompile). Put the .zoo file of the
    fix in there, and unzoo. Then start cygwin, and go to the directory
    where the fix was unzooed. Type `make', which produces a binary in
    bin\i586******\gap.exe. Then copy (e.g., via ftp) `gap.exe' to 
    `FIX/bin/gapw95.exe'.
    It is a good idea to have a copy of `cygwin1.dll' in that same directory
    (there are Windows users who install `basic4r3.zoo' which does not contain
    that file, and get the latest binary; putting it in there will avoid
    answering about two questions every 5 months). Then issue
       
            zoo ah wbin4r3n2.zoo bin/*

    which produces the zoo file containing the binary.


13) Try installing the Windows binary, and try the testexamples.

14) In order to put the files on the ftp server, become root on chrystal.
    Put the fix, and the windows binary in
 
         /user5/ftp/pub/gap/gap4/bugfixes

    (and issue `chgrp ftp *' and `chmod 444 *').
         
    Put the .zoo file containing the Windows binary also in

         /user5/ftp/pub/gap/gap4/bin/win

    Put the Mac binaries in

         /user5/ftp/pub/gap/gap4/bin/mac

    
    NOTE: if there are no new binaries then changing the webpages 
    (see below) will change the references to the binaries (e.g.,
    if there is a second bugfix, but no second binary fix, then
    `wbin4r3n2.zoo' will become `wbin4r3n3.zoo' on the webpages). 
    In this case, a symbolic link will solve the problem.


15) For editing the web pages one has to become gap (on chrystal, to get
    the file sizes later on). Go to `/gap/WWW/Info4', and edit
    `bugfixes.input' (add a few lines on the latest bugfix, and links).
    COMMIT `bugfixes.input' (in cvs), otherwise the mirrors will not 
    get the fixes.
    Also edit `/gap/WWW/Util/DEFAULTS' + cvs commit (change the version 
    number).
    Finally go to `/gap/WWW' and issue `make stand'; this will produce
    the file sizes.

16) Reinitialize dev/BUGFIX with the template, but keep the list of files
    (we will make fixes comprehensive).

17) Send the announcement to the GAP Forum.
    Go to a pub without internet access.

