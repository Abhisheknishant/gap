#############################################################################
##
#W  hash2.tst                   GAP library		       Gene Cooperman
#W							     and Scott Murray
##
#H  @(#)$Id$
##
#Y  Copyright (C)  1998,  Lehrstuhl D fÃ¼r Mathematik,  RWTH Aachen,  Germany
##
##  Exclude from testinstall.g: why?
##

gap> START_TEST("$Id$");

gap> # Sparse vector hash table
gap> V := FullRowSpace( GF(5), 3 );
( GF(5)^3 )
gap> hash := SparseHashTable(SparseIntKey(V,false));
Keys: [  ]
Values: [  ]
gap> for i in [1..124] do
>     e := Enumerator( V );
>     AddHashEntry( hash, e[i], e[i][1] );
> od;
gap> Print(hash); Size(hash);
Keys: [ [ 0*Z(5), 0*Z(5), 0*Z(5) ], [ 0*Z(5), 0*Z(5), Z(5)^0 ], 
  [ 0*Z(5), 0*Z(5), Z(5) ], [ 0*Z(5), 0*Z(5), Z(5)^2 ], 
  [ 0*Z(5), 0*Z(5), Z(5)^3 ], [ 0*Z(5), Z(5)^0, 0*Z(5) ], 
  [ 0*Z(5), Z(5)^0, Z(5)^0 ], [ 0*Z(5), Z(5)^0, Z(5) ], 
  [ 0*Z(5), Z(5)^0, Z(5)^2 ], [ 0*Z(5), Z(5)^0, Z(5)^3 ], 
  [ 0*Z(5), Z(5), 0*Z(5) ], [ 0*Z(5), Z(5), Z(5)^0 ], [ 0*Z(5), Z(5), Z(5) ], 
  [ 0*Z(5), Z(5), Z(5)^2 ], [ 0*Z(5), Z(5), Z(5)^3 ], 
  [ 0*Z(5), Z(5)^2, 0*Z(5) ], [ 0*Z(5), Z(5)^2, Z(5)^0 ], 
  [ 0*Z(5), Z(5)^2, Z(5) ], [ 0*Z(5), Z(5)^2, Z(5)^2 ], 
  [ 0*Z(5), Z(5)^2, Z(5)^3 ], [ 0*Z(5), Z(5)^3, 0*Z(5) ], 
  [ 0*Z(5), Z(5)^3, Z(5)^0 ], [ 0*Z(5), Z(5)^3, Z(5) ], 
  [ 0*Z(5), Z(5)^3, Z(5)^2 ], [ 0*Z(5), Z(5)^3, Z(5)^3 ], 
  [ Z(5)^0, 0*Z(5), 0*Z(5) ], [ Z(5)^0, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^0, 0*Z(5), Z(5) ], [ Z(5)^0, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^0, 0*Z(5), Z(5)^3 ], [ Z(5)^0, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^0, Z(5)^0, Z(5)^0 ], [ Z(5)^0, Z(5)^0, Z(5) ], 
  [ Z(5)^0, Z(5)^0, Z(5)^2 ], [ Z(5)^0, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^0, Z(5), 0*Z(5) ], [ Z(5)^0, Z(5), Z(5)^0 ], [ Z(5)^0, Z(5), Z(5) ], 
  [ Z(5)^0, Z(5), Z(5)^2 ], [ Z(5)^0, Z(5), Z(5)^3 ], 
  [ Z(5)^0, Z(5)^2, 0*Z(5) ], [ Z(5)^0, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^0, Z(5)^2, Z(5) ], [ Z(5)^0, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^0, Z(5)^2, Z(5)^3 ], [ Z(5)^0, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^0, Z(5)^3, Z(5)^0 ], [ Z(5)^0, Z(5)^3, Z(5) ], 
  [ Z(5)^0, Z(5)^3, Z(5)^2 ], [ Z(5)^0, Z(5)^3, Z(5)^3 ], 
  [ Z(5), 0*Z(5), 0*Z(5) ], [ Z(5), 0*Z(5), Z(5)^0 ], [ Z(5), 0*Z(5), Z(5) ], 
  [ Z(5), 0*Z(5), Z(5)^2 ], [ Z(5), 0*Z(5), Z(5)^3 ], 
  [ Z(5), Z(5)^0, 0*Z(5) ], [ Z(5), Z(5)^0, Z(5)^0 ], [ Z(5), Z(5)^0, Z(5) ], 
  [ Z(5), Z(5)^0, Z(5)^2 ], [ Z(5), Z(5)^0, Z(5)^3 ], [ Z(5), Z(5), 0*Z(5) ], 
  [ Z(5), Z(5), Z(5)^0 ], [ Z(5), Z(5), Z(5) ], [ Z(5), Z(5), Z(5)^2 ], 
  [ Z(5), Z(5), Z(5)^3 ], [ Z(5), Z(5)^2, 0*Z(5) ], [ Z(5), Z(5)^2, Z(5)^0 ], 
  [ Z(5), Z(5)^2, Z(5) ], [ Z(5), Z(5)^2, Z(5)^2 ], [ Z(5), Z(5)^2, Z(5)^3 ], 
  [ Z(5), Z(5)^3, 0*Z(5) ], [ Z(5), Z(5)^3, Z(5)^0 ], [ Z(5), Z(5)^3, Z(5) ], 
  [ Z(5), Z(5)^3, Z(5)^2 ], [ Z(5), Z(5)^3, Z(5)^3 ], 
  [ Z(5)^2, 0*Z(5), 0*Z(5) ], [ Z(5)^2, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^2, 0*Z(5), Z(5) ], [ Z(5)^2, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^2, 0*Z(5), Z(5)^3 ], [ Z(5)^2, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^2, Z(5)^0, Z(5)^0 ], [ Z(5)^2, Z(5)^0, Z(5) ], 
  [ Z(5)^2, Z(5)^0, Z(5)^2 ], [ Z(5)^2, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^2, Z(5), 0*Z(5) ], [ Z(5)^2, Z(5), Z(5)^0 ], [ Z(5)^2, Z(5), Z(5) ], 
  [ Z(5)^2, Z(5), Z(5)^2 ], [ Z(5)^2, Z(5), Z(5)^3 ], 
  [ Z(5)^2, Z(5)^2, 0*Z(5) ], [ Z(5)^2, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^2, Z(5)^2, Z(5) ], [ Z(5)^2, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^2, Z(5)^2, Z(5)^3 ], [ Z(5)^2, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^2, Z(5)^3, Z(5)^0 ], [ Z(5)^2, Z(5)^3, Z(5) ], 
  [ Z(5)^2, Z(5)^3, Z(5)^2 ], [ Z(5)^2, Z(5)^3, Z(5)^3 ], 
  [ Z(5)^3, 0*Z(5), 0*Z(5) ], [ Z(5)^3, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^3, 0*Z(5), Z(5) ], [ Z(5)^3, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^3, 0*Z(5), Z(5)^3 ], [ Z(5)^3, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^3, Z(5)^0, Z(5)^0 ], [ Z(5)^3, Z(5)^0, Z(5) ], 
  [ Z(5)^3, Z(5)^0, Z(5)^2 ], [ Z(5)^3, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^3, Z(5), 0*Z(5) ], [ Z(5)^3, Z(5), Z(5)^0 ], [ Z(5)^3, Z(5), Z(5) ], 
  [ Z(5)^3, Z(5), Z(5)^2 ], [ Z(5)^3, Z(5), Z(5)^3 ], 
  [ Z(5)^3, Z(5)^2, 0*Z(5) ], [ Z(5)^3, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^3, Z(5)^2, Z(5) ], [ Z(5)^3, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^3, Z(5)^2, Z(5)^3 ], [ Z(5)^3, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^3, Z(5)^3, Z(5)^0 ], [ Z(5)^3, Z(5)^3, Z(5) ], 
  [ Z(5)^3, Z(5)^3, Z(5)^2 ] ]
Values: [ 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 
  0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 
  0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5), Z(5), Z(5), Z(5), 
  Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), 
  Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, 
  Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, 
  Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, 
  Z(5)^3, Z(5)^3 ]
124
gap> Enumerator(hash); HashKeyEnumerator(hash); 
[ 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 
  0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 
  0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), 0*Z(5), Z(5)^0, Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, 
  Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5)^0, Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), 
  Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), 
  Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5), Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^2, 
  Z(5)^2, Z(5)^2, Z(5)^2, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, 
  Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, 
  Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3, Z(5)^3 ]
[ [ 0*Z(5), 0*Z(5), 0*Z(5) ], [ 0*Z(5), 0*Z(5), Z(5)^0 ], 
  [ 0*Z(5), 0*Z(5), Z(5) ], [ 0*Z(5), 0*Z(5), Z(5)^2 ], 
  [ 0*Z(5), 0*Z(5), Z(5)^3 ], [ 0*Z(5), Z(5)^0, 0*Z(5) ], 
  [ 0*Z(5), Z(5)^0, Z(5)^0 ], [ 0*Z(5), Z(5)^0, Z(5) ], 
  [ 0*Z(5), Z(5)^0, Z(5)^2 ], [ 0*Z(5), Z(5)^0, Z(5)^3 ], 
  [ 0*Z(5), Z(5), 0*Z(5) ], [ 0*Z(5), Z(5), Z(5)^0 ], [ 0*Z(5), Z(5), Z(5) ], 
  [ 0*Z(5), Z(5), Z(5)^2 ], [ 0*Z(5), Z(5), Z(5)^3 ], 
  [ 0*Z(5), Z(5)^2, 0*Z(5) ], [ 0*Z(5), Z(5)^2, Z(5)^0 ], 
  [ 0*Z(5), Z(5)^2, Z(5) ], [ 0*Z(5), Z(5)^2, Z(5)^2 ], 
  [ 0*Z(5), Z(5)^2, Z(5)^3 ], [ 0*Z(5), Z(5)^3, 0*Z(5) ], 
  [ 0*Z(5), Z(5)^3, Z(5)^0 ], [ 0*Z(5), Z(5)^3, Z(5) ], 
  [ 0*Z(5), Z(5)^3, Z(5)^2 ], [ 0*Z(5), Z(5)^3, Z(5)^3 ], 
  [ Z(5)^0, 0*Z(5), 0*Z(5) ], [ Z(5)^0, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^0, 0*Z(5), Z(5) ], [ Z(5)^0, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^0, 0*Z(5), Z(5)^3 ], [ Z(5)^0, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^0, Z(5)^0, Z(5)^0 ], [ Z(5)^0, Z(5)^0, Z(5) ], 
  [ Z(5)^0, Z(5)^0, Z(5)^2 ], [ Z(5)^0, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^0, Z(5), 0*Z(5) ], [ Z(5)^0, Z(5), Z(5)^0 ], [ Z(5)^0, Z(5), Z(5) ], 
  [ Z(5)^0, Z(5), Z(5)^2 ], [ Z(5)^0, Z(5), Z(5)^3 ], 
  [ Z(5)^0, Z(5)^2, 0*Z(5) ], [ Z(5)^0, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^0, Z(5)^2, Z(5) ], [ Z(5)^0, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^0, Z(5)^2, Z(5)^3 ], [ Z(5)^0, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^0, Z(5)^3, Z(5)^0 ], [ Z(5)^0, Z(5)^3, Z(5) ], 
  [ Z(5)^0, Z(5)^3, Z(5)^2 ], [ Z(5)^0, Z(5)^3, Z(5)^3 ], 
  [ Z(5), 0*Z(5), 0*Z(5) ], [ Z(5), 0*Z(5), Z(5)^0 ], [ Z(5), 0*Z(5), Z(5) ], 
  [ Z(5), 0*Z(5), Z(5)^2 ], [ Z(5), 0*Z(5), Z(5)^3 ], 
  [ Z(5), Z(5)^0, 0*Z(5) ], [ Z(5), Z(5)^0, Z(5)^0 ], [ Z(5), Z(5)^0, Z(5) ], 
  [ Z(5), Z(5)^0, Z(5)^2 ], [ Z(5), Z(5)^0, Z(5)^3 ], [ Z(5), Z(5), 0*Z(5) ], 
  [ Z(5), Z(5), Z(5)^0 ], [ Z(5), Z(5), Z(5) ], [ Z(5), Z(5), Z(5)^2 ], 
  [ Z(5), Z(5), Z(5)^3 ], [ Z(5), Z(5)^2, 0*Z(5) ], [ Z(5), Z(5)^2, Z(5)^0 ], 
  [ Z(5), Z(5)^2, Z(5) ], [ Z(5), Z(5)^2, Z(5)^2 ], [ Z(5), Z(5)^2, Z(5)^3 ], 
  [ Z(5), Z(5)^3, 0*Z(5) ], [ Z(5), Z(5)^3, Z(5)^0 ], [ Z(5), Z(5)^3, Z(5) ], 
  [ Z(5), Z(5)^3, Z(5)^2 ], [ Z(5), Z(5)^3, Z(5)^3 ], 
  [ Z(5)^2, 0*Z(5), 0*Z(5) ], [ Z(5)^2, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^2, 0*Z(5), Z(5) ], [ Z(5)^2, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^2, 0*Z(5), Z(5)^3 ], [ Z(5)^2, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^2, Z(5)^0, Z(5)^0 ], [ Z(5)^2, Z(5)^0, Z(5) ], 
  [ Z(5)^2, Z(5)^0, Z(5)^2 ], [ Z(5)^2, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^2, Z(5), 0*Z(5) ], [ Z(5)^2, Z(5), Z(5)^0 ], [ Z(5)^2, Z(5), Z(5) ], 
  [ Z(5)^2, Z(5), Z(5)^2 ], [ Z(5)^2, Z(5), Z(5)^3 ], 
  [ Z(5)^2, Z(5)^2, 0*Z(5) ], [ Z(5)^2, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^2, Z(5)^2, Z(5) ], [ Z(5)^2, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^2, Z(5)^2, Z(5)^3 ], [ Z(5)^2, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^2, Z(5)^3, Z(5)^0 ], [ Z(5)^2, Z(5)^3, Z(5) ], 
  [ Z(5)^2, Z(5)^3, Z(5)^2 ], [ Z(5)^2, Z(5)^3, Z(5)^3 ], 
  [ Z(5)^3, 0*Z(5), 0*Z(5) ], [ Z(5)^3, 0*Z(5), Z(5)^0 ], 
  [ Z(5)^3, 0*Z(5), Z(5) ], [ Z(5)^3, 0*Z(5), Z(5)^2 ], 
  [ Z(5)^3, 0*Z(5), Z(5)^3 ], [ Z(5)^3, Z(5)^0, 0*Z(5) ], 
  [ Z(5)^3, Z(5)^0, Z(5)^0 ], [ Z(5)^3, Z(5)^0, Z(5) ], 
  [ Z(5)^3, Z(5)^0, Z(5)^2 ], [ Z(5)^3, Z(5)^0, Z(5)^3 ], 
  [ Z(5)^3, Z(5), 0*Z(5) ], [ Z(5)^3, Z(5), Z(5)^0 ], [ Z(5)^3, Z(5), Z(5) ], 
  [ Z(5)^3, Z(5), Z(5)^2 ], [ Z(5)^3, Z(5), Z(5)^3 ], 
  [ Z(5)^3, Z(5)^2, 0*Z(5) ], [ Z(5)^3, Z(5)^2, Z(5)^0 ], 
  [ Z(5)^3, Z(5)^2, Z(5) ], [ Z(5)^3, Z(5)^2, Z(5)^2 ], 
  [ Z(5)^3, Z(5)^2, Z(5)^3 ], [ Z(5)^3, Z(5)^3, 0*Z(5) ], 
  [ Z(5)^3, Z(5)^3, Z(5)^0 ], [ Z(5)^3, Z(5)^3, Z(5) ], 
  [ Z(5)^3, Z(5)^3, Z(5)^2 ] ]
gap> r := e[20];
[ 0*Z(5), Z(5)^2, Z(5)^3 ]
gap> GetHashEntry( hash, r );
0*Z(5)
gap> GetHashEntryAtLastIndex( hash );
0*Z(5)
gap> SetHashEntryAtLastIndex( hash, 0 );
0
gap> GetHashEntry( hash, r );
0
gap> GetHashEntry( hash, e[125] );
fail

gap> STOP_TEST( "hash2.tst", 20000000 );


#############################################################################
##
#E  

