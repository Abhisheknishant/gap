           Creating Main Archives of GAP Distribution
           ==========================================



To do this one needs:
  - a UNIX machine
  - 1 GB disc space
  - sh + std progs like cp, mv and so on
  - cvs and access to GAPs CVS repository 
  - tex (big)
  - perl
  - tth 
  - C compiler, make
  - zoo, unzoo, tar, gzip, bzip2, python (for repack)
  - persons who provide Win and Mac binaries (but all except Win and Mac
    works and can be tested without this)

Here are the steps to wrap release archives:

(0) *only* before the first serious attempt to wrap a release candidate:
    create a CVS tag and branch from the current repository, use a command
    like:
       cvs tag -b -D now GAP4R4

    Make sure that the dlls and .exe programs under bin are up-to-date. 

(1) edit 'setvar': 
        - choose a directory for the wrapping (should have about
          1GB of free space)
        - choose a GAPCVSVERSION ("-D now" during test and using the tag 
          from step (0) (say "-r GAP4R4") for the real wrapping
        - give VERSION, FULLVERSION and RBVERSION
	- set the values for the package archive
(1a) In the release branch: Update version numbers, edit and commit 
        lib/system.g:  'Version', 'Date', 'NeedKernelVersion'
        src/system.c: 'KernelVersion', 'SyWindowsPath' (for main releases)
        doc/build/config.install:  'versionnumber', 'versionsuffix', 
                                   'releaseday'
    in the release branch.
(1b) Extract test code from dev/Update into tst/bugfix.tst and commit it
    to release branch.  (utils in Update.g)
       d := UpdateData("../../Update");;
       l := FixesAndOthersData(d);;
       PrintTestLines("guck.tst", l);
    and then copy content of 'guck.tst' to bottom of 
(1c) Extract descriptions of changes from dev/Update into ./description* and
    commit to release branch.  (utils in Update.g)
       d := UpdateData("../../Update");;
       l := FixesAndOthersData(d);;
       PrintDescriptionLines("guck.html", l);
    Then copy content of 'guck.html' to new subsection close to top of
    'Download/bugs.mixer' in CVS of website and commit; run 'mixer' and
    cut out this subsection from result of 'w3m -dump bugs.html' into
    description* file.

The `doit' script will do all of 2-7 in one step.

(2) use 'checkout' to get current files from repository (if necessary, first 
    login to the CVS repository) as well as the packages archive.

(3) create the documentation:
        - Current versions of packages will have been copied to `'pkg' by
	  the `checkout' script.
        - use 'makedoc'
          This writes files 'make_doc.log' and 'make_doc.error' in the root 
          directory of the build - check these (in the end of 'make_doc.log'
          are the lines on over/underfull boxes and undefined references
          from the latest manual.log files); if problems show up, correct
          them and start and go back to (2), or maybe (1b).
        
(4) create completion files: (if necessary on your system set the
    environment variables CC, COPTS, LOPTS, such that gap compiles with
    (configure; make))
    call 'completionfiles'

(5) use 'fixpermissions' to fix permissions

(6) pack the main gap4...zoo archive and tools...zoo with 'zooandtag'
    NOTE: our CVS repository contains many files in the 4.0 tree which
    should not be included in the distributed archive. So, we need to 
    give an explicit list of the files to be included which is contained in 
    this 'zooandtag' script. To keep this list simple, files not intended for
    distribution should, if possible,  be inside directories which are not 
    distributed at all. 
    Furthermore, the script lists separately the files which are text files
    and those which are binary files (to manage line break syntax on
    different operating systems).
    If new executable files are added to the distribution, don't forget to 
    add them in the corresponding list in the 'fixpermissions' script.

In no particular order:

(7) add the Windows binary by
        - call 'winbin'
        - follow the printed instructions
        (or copy an existing archive winbin.tgz to the given place)

(7b) add the data directories (trans, prim, small) with 'zooandtagdata'.
    Note: This is separated from 'zooandtag' above such that one can have
    the windows binaries in the archive *before* the large data libraries.
    When testing the Windows version one can thus stop extraction early.

(8) -

(9) *only* for 4.4:  add the main archive of the tomlib package and
    create xtom1r1p2.zoo by
        - (optional, if Thomas provides the tomlib1r1p2.zoo and
          tomlibxt1r1p2.zoo archives): copy these to $DISTROOT
        - call 'addtomlib4.4'

Finally:

(10) for publishing the archives, apply 'repack.py' to create the other 
     formats (.tar.gz, .tar.bz2, -win.zip) with 'repack'.

(11) Only for update releases: 
    create archive fix... with differences:
      - get copies of old gap4r...zoo archives
      - check which files are new in new archive,
              which files are no longer present (maybe put empty files for
                  these in the fix... archive),
              which files were changed
      - pack the new and changed (and empty ones for the removed) in a 
        new archive; this must be done inside the main gap4... directory,
        so strip the file names accordingly; mark the files as binary 
        or text as they are marked in the new .zoo archive
     There is  a utility file 'DiffFiles.g' which can be used, for example:
       CreateDiffsArchive("/buildpath/gap4r4p5.zoo",
         ["/oldarchs/gap4r4p2.zoo", "/oldarchs/gap4r4p3.zoo", 
          "/oldarchs/gap4r4p4.zoo"],
         "/tmpzoo", "fix4r4p5.zoo", "gap4r4/", 
         ["GAP 4 PPC", "gap4r4/description3", "gap4r4/description4"] );
       This leaves a fix4r4p5.zoo in /tmpzoo; repack.py it and copy to
       build directory.
-----------  last time --------------
       CreateDiffsArchive("/export3/home/luebeck/gap446/archives/gap4r4p6.zoo",
       ["/export3/home/luebeck/gap444/gap4r4p2.zoo",
        "/export3/home/luebeck/gap444/gap4r4p3.zoo",
        "/export3/home/luebeck/gap444/gap4r4p4.zoo",
        "/export3/home/luebeck/gap444/gap4r4p5.zoo"],
         "/export3/home/luebeck/gap446/tmpzoo", "fix4r4p6.zoo", "gap4r4/", 
         ["GAP 4 PPC", "gap4r4/description3", "gap4r4/description4",
          "gap4r4/description4r4p5" ] 
        );
-------------------------------------

(12) (deleted - we do no longer ship a Mac OS 9 binary)
    
(13) That's it for the wrapping of a release candidate! 
     Now start to install from these archives, run all sorts of tests, try 
     packages, ..., release!

(14) In case of problems apply fixes and wrap again (some points above 
     can become very easy and fast in a repeated run).

(15) When the archives are to be released, tag all current files in the
     release branch, in the top GAP directory of the checked out release
     branch say:
        cvs tag GAP4R4PX .
     Also move the current dev/Update to dev/Update4.4.x (x the version to
     release) and add it to the cvs repository, copy dev/Update.empty to 
     dev/Update, commit both to cvs.

(16) Hint: before applying the fix to your own GAP installation keep a copy 
     of the former installation for a while. This is useful for responding
     to problem reports after the update.


