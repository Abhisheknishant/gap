
# README for package updates                         Frank LÃ¼beck

     Tasks and tools for administrating the package distribution

[See also the file HOWTO for a short description of how the current
maintenance looks like in practice.]

This README describes how to achieve the following goals.

(1) Find out the newest versions of all packages distributed with GAP.
(2) Collect the newest archives.
(3) Translate archives in one format to the other formats used by
    the GAP distribution.
(4) Wrap merged archives of all redistributed packages and produce
    archives in all four currently supported formats.
(5) Put archives on the FTP server.
(6) Produce meta-information on packages for GAP's website.

Now each of these points is discussed, first by explaining how to find the
necessary information, and second by describing a script which is currently
used. The main functions for the scripts are written in GAP and they are
called by a set of shell scripts.

(Note that the description here are quite independent from the current
scripts performing the tasks. It wouldn't be too difficult to write another
set of scripts in any other language, or in principle one could also do
everything 'by hand'.)

(0) Basic idea.

Since GAP 4.4 each package contains a file 'PackageInfo.g' which collects
all relevant meta information for:
  - loading the package and
  - distristributing/updating a package

A PackageInfo.g is a GAP readable file, specifying a GAP record with
documented components, see 
   http://www.gap-system.org/Packages/Authors/PackageInfo.g
for details.

We assume that for each package there is an URL providing the latest
version of its PackageInfo.g file, and an URL for an archive of the package
in at least one of the archive formats used for the GAP distribution.

(1) Find out the newest versions of all packages distributed with GAP.

Download the current versions of PackageInfo.g files and check their
'Version' component.

A backup of the current locations of PackageInfo.g files is in
   http://www.gap-system.org/Packages/currentPackageInfoURLList

Check for each package if the entry 'PackageInfoURL' has changed, in 
that case adjust the list above appropriately.

Tool: the script 'updatePackageInfoFiles' downloads the newest versions 
of all PackageInfo.g files and compares them with  cached versions in
   ../pkgcache/<pkg name in lower case letters>
It prints a message which packages have changed PackageInfo.g files
and substitutes chached copies by the new versions. 
(The script 'writePackageWebInfos', see below, creates a file
./currentPackageInfoURLs which can also be used to update the file
currentPackageInfoURLList mentioned above.)

(2) Collect the newest archives.

URLs for the original archives are contained with entries 'ArchiveURL' and
'ArchiveFormats' in the PackageInfo.g files. Just download them.

Since often one or several package home pages / archives are offline, it is
sensible to cache the successfully downloaded archives. (Note that the 
documentation for the PackageInfo.g files says that different archives *must*
have different names. So, it is safe to compare the archive name given in the
PackageInfo.g file with the names of chached archives to decide if a new
download is necessary.

Tool: The script 'updatePackageArchives' downloads those archives which are
not already cached in ../pkgcache/<pkg name in lower case letters>.
Missing archive formats are also produced, see (3) below. The archives are
copied to directories ../webftp/ftpdir/{tar.bz2,tar.gz,win.zip,zoo} for
syncronization with the FTP site.

(3) Translate archives in one format to the other formats used by
    the GAP distribution.

This can be done with the programs 'tar', 'gzip', 'bzip2', 'zoo', 'zip'.
Note the following special rules for text files in .zoo  and  -win.zip archives
to allow unpacking with different line break conventions on different
operating systems:
  
  text files in .zoo files must have a one line comment of form:
!TEXT!
  
  text files in -win.zip archives must have DOS/Windows line breaks.
  
The files in .zoo, .tar.gz, .tar.bz2 archives must have UNIX style line
breaks.

To find out the text files in a package archive proceed as follows:
- If a .zoo archive is provided treat the files with a '!TEXT!' comment
  as text files.
- If a .TextFiles component is specified in the PackageInfo.g file, then
  consider the given files as text files.
- If a .BinaryFiles component is specified in the PackageInfo.g file, then
  consider all not given files as text files.
- Use a sensible list of file extensions to decide if a file is a text file
  (be conservative, maybe miss a few).

Tools: There is a python-script 'repack.py' in the GAP cvs repository in
   dev/DistributionUpdate/maindist/repack.py
One can use this directly or study its code to learn sensible options to the
programs mentioned above.  
Also, the script 'updatePackageArchives' mentioned in (2) does the
translation for the updated package archives.


(4) Wrap merged archives of all redistributed packages and produce
    archives in all four currently supported formats.

- Choose a temporary directory and unpack there all recent versions of
  package archives, just as you would unpack them in the 'pkg' subdirectory
  of a GAP installation.
- Copy a README file for each package in that directory with name of form
    README.<pkg name in lower case letters>
  These files can be found from URLs given in the component 'README_URL' of 
  the 'PackageInfo.g' files.
- Produce archives containing the contents of this directory in the four
  distribution formats. Note the remark on text files given in (3).

As archive names use something like
   packages-2004_10_14-09_37_UTC.tar.gz
such that the time of creation (or at least some unique version number) 
is encoded in the name, and such that alphabetic directory listings will
show the newest archive last.

Tool: the script 'mergePackageArchives' does the above by unpacking the
.zoo archives of all packages and determining the  text files from the
comments in those. It also substitutes the merged package archives 
in the directories ../webftp/ftp/dir/* by the newly created ones.


(5) Put archives on the FTP server.

Currently, the merged package files in the FTP directory of the distribution
are put in subdirectories tar.bz2, tar.gz, zoo and win.zip, depending on the
archive format.
The archives of the single packages are copied to 
  {tar.bz2,tar.gz,win.zip,zoo}/packages
depending on the format.
Outdated merged archives are deleted from the FTP server from time to time,
and older package archives are left on the server.

Tool: The script 'CopyToFtpServer' updates the FTP server directory from the
helper directory ../webftp/ftpdir via the 'rsync' program. It asks for
confirmation before the actual copying.


(6) Produce meta-information on packages for GAP's website.

Of course, this step need some cooperation with the maintainer
of the web pages.

Currently, the following information on packages is available via the GAP
web pages:
- an overview of all packages, sorted by status:
     http://www.gap-system.org/Packages/packages.html
  For this page links to the current merged package archives are needed, see
  (4) and (5) above.
  Package names, author names and subtitles of each package are straight
  forward to extract from the PackageInfo.g files.
- an online copy of the documentation of each package with a list of links on
     http://www.gap-system.org/Doc/manuals.html
  The source of the documentation is also given in the PackageInfo.g files:
  Either a help book (some packages have several help books!) listed in
  component 'PackageDoc' has a component 'Archive', in that case copy the
  documentation from that given URL and unpack it. Or instead a component
  'ArchiveURLSubset' is given, in that case unpack the given
  files/directories from the package archive (which is on the FTP server,
  see (5)).
- for each package there is one page with meta information on the package,
  like: authors, link to homepage, current version, links to archives and 
  to online copy of its documentation (see the previous point), ...
  Except for the links to archives and online documentation this is just a
  a web page formatted extraction of the information in the PackageInfo.g
  file.

Tools: The script 'updatePackageDocs' does the extraction of the package
documentation for  online use. It produces the documentation part of a
'pkg' directory of a GAP installation in the directory
'../webftp/Packages/pkg'. The script 'writePackageWebInfos' produces the
single web pages for each package (as .mixer files) and pieces of HTML code
for use with the package overview page (pieces usable by the 'mixer'
utility).
The script 'CopyToWWW2' syncronizes these files with a CVS  checkout of the 
'Packages' subdirectory of the GAP web site, located in ../WWW2. Actual copying 
is only done after confirmation.
After a final check the new files in ../WWW2 must be checked into the
cvs-repository with 'cvs commit'.




