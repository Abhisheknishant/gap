
Mini-HOWTO of current maintenance of GAPs package redistribution
                                                             Frank LÃ¼beck


Please, refer to the README for details of what needs to be done.
Here is short overview how the maintenance currently looks like in practice.

The current setup is on host ftp.gap-system.org (yin) by the pseudo user
'gap' in the directory ~/PackageAdmin.

All  scripts mentioned below are in ~/PackageAdmin/PackageAdmin.

Each weekday night the script
   updateAll <email_address> 
is started (with cron) which sends its output by email to the given address.

New packages are added to the mechanism by
  addpackage <pkg name> <url of PackageInfo.g> 
which just creates a new directory for caching data for that package and 
adds a rudimentary PackageInfo.g file, containing the URL of the real one.

If something has changed or a new package was added, I do:

- check the new PackageInfo.g for consistency/plausibility; it must be GAP
  readable. Some formal checks are performed by the GAP function
  'ValidatePackageInfo', and there is currently a Web interface in the
  bottom of the page 
      http://www.gap-system.org/Packages/Authors/authors.html
  to another test script.

- get the new/changed archives and do a test installation (with the current
  officially released version of GAP), check if GAP
  can load the new package, check if the package documentation in the
  various formats works, check if file permissions are sensible, call a test
  file if available or try some example commands from the package
  documentation.

If any problem showed up so far: Don't proceed but contact the package
authors, if possible give concrete suggestions how to resolve the problem.

[NOTE: these first two steps are the most important ones! One would hope,
that they are done by the package authors,  but experience showed that this
is not the case for all of them.]

- create  new versions of the merged archives with 'mergePackageArchives'

- copy new archives to FTP site with 'CopyToFtpServer'

- update the information for the web pages (and commit the changes), use
  'writePackageWebInfos', 'CopyToWWW2' and then in ../WWW2 'cvs commit'
  Note, that with the last 'updateAll' also a copy of the online documentation 
  of the changed/new packages has been updated/unpacked (in
  ../webftp/Packages/pkg).
  The package dependent text pieces for the web pages are stored in the
  python/mixer-readable file WWW2/pkgconf.py.

- inform the maintainer of the web pages (who has to make the changes
  public)


----------------------------------------
If some new version of package causes problems
==============================================

Sometimes new versions of a package cause problems and the authors cannot
resolve them quickly. In such case it can be useful to leave the previous
version in the redistribution. This can be done as follows (for the package
'badpkg':

- go to the directory $PkgCacheDir/badpkg
- overwrite the PackageInfo.g file by that of the  old version (which is 
  saved here under a name like PackageInfo.g-2006_10_16-21_34_UTC)
- touch DONTUPDATE

Now,  the scripts 'updateAll' or 'updatePackageInfoFiles' or the GAP
function UpdatePackageInfoFiles will leave alone the PackageInfo.g for
badpkg. You will also use mergePackageArchives to create a new merged
archive containing the old version of badpkg. 

Once the problems with badpkg are resolved, just delete the file 
$PkgCacheDir/badpkg/DONTUPDATE
