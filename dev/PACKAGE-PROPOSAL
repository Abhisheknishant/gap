sal@dcs.st-and.ac.uk said:
Let me make a (series of connected) proposals based on recent
discussions  about lib->pkg and submitshare and possible changes to
the distribution  structure.

1. Packages.

A package is an part of or extension to GAP which resides in a
directory under  pkg in the GAP distribution and is used the interface
defined in section 73.4  of the manual "Functions for Share Packages"
(which should be renamed).

Packages therefore have their own manual and version number, and
package  upgrades should be easy to drop in.

A package will normally be a module. Exceptionally, one package may be
several  modules, or several packages may be one module. Packages
should not normally  contain unmodularised core GAP code.

Packages may be auto-loading, or not. Package documentation should
normally be  autoloaded.

2. History  of Packages

Packages may arise either as external contributions, or by separation
of parts  of the "core system". In the latter case they should be
auto-loaded, at least  for an initial period.

If the maintainer of a module (or the person in that position "de
facto" until  we get modules settled down) wishes to move their module
from the core system  to a package, this is basically OK. Possible
grounds for objection are:

* technical -- some library code depends on declarations in the module
(all  library
               code is loaded before all packages)

* presentational -- the module is much too small to be a sensible
package, or
               something of that kind.

Such objections will be debated on gap-dev in the usual manner.

External packages are "packages" as soon as they are written. They
become  "deposited packages" when the authors send them to us for that
purpose. They  become "refereed packages" when the editor says they
do.

3. Maintenance

There is in general, no undertaking by the "core GAP team" to maintain
any  packages if no maintainer can be found, and such situations will
be handled  case by case. Library code which has been moved into a
package is likely to be  treated more sympathetically that an external
package, but there are no  promises.

4. Refereeing

Refereeing is actually no longer really an issue about packages, but
about  modules. We agreed in Aachen that, in principle, any module
could be submitted for  refereeing. Since most packages will be
modules, though, this is still  relevant here, and probably the most
common form for refereeing.

5. Distribution archives

In one sense, this is entirely technical and unimportant, but it's
very  visible and has a big impact on what people "see" as GAP.

I propose that, with each major release of GAP:

1. That all packages that were formally part of the library be
included in the  "standard" distribution (in the pkg directory). If
one ever becomes really  unmaintained, to the point of not working,
then we might have to think again.

2. That all refereed packages whose maintainers confirm that they have
tested  them with the pre-release of the current release are wrapped
up together in  another archive. [ we might do some testing ourselves,
here, but we don't  committ to it]

3. That all deposited packages whose maintainers confirm that they
have tested  them with the pre-release of the current release are
wrapped up together in  another archive.

4. That current versions of all other deposited or refereed packages
be wrapped up in a final archive.

In principle, I'd like to rebuild these archives automatically
whenever a package is updated, but this is some work. 


