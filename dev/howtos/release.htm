<html><head><title>HOWTO Release</title></head>
<body bgcolor="ffffff"><h1>HOWTO Release</h1>
<A NAME="when"><H2>What timeline is planned for the next
release</H2></A>
<A NAME="new"><H2>How do I ensure my new material will be
in</H2></A>
<A NAME="feat"><H2>What are required features</H2></A>
<A NAME="tell"><H2>What can I promise about upcoming
releases</H2></A>
<A NAME="phs"><H2>What is the release phase</H2></A>
<A NAME="test"><H2>Which test must succed so that wrap can start</H2></A>

<UL>
<LI>
All packages must be in their most recent version available for
<tt>GETPKG</tt>.
<LI>The announcement (apart from personal remaks by the wrapper) must have
circulated in <tt>gap-dev</tt>.
</UL>

<A NAME="chg"><H2>What can be changed once the release
phase has started</H2></A>
<A NAME="pre"><H2>How do releases and prereleases differ</H2></A>
Only in their distribution. If a prerelease did not show any problems that
would have to be fixed, it is put on the ftp server as a release and the
announcement is sent out.
<P>
Note that this means that the version number of a release is likely of the
form 4.4.2 with a nonzero subversion.
<A NAME="wrap"><H2>How is a (pre)release wrapped</H2></A>

First verify, by getting an explicit response from the persons responsible
for the various checks, that everything that should be done or tested is
done indeed.
<P>
Next, send an announcement to <tt>gap-dev</tt> that wrapping will start in
two days (this is to make sure nobody will be checking in even trivial
changes during wrapping, two days resolve all timezone differences).
<P>
Two days later...
<P>
The new version number will be 4.release.sub where sub is initially 0 and
gets incremented with every prerelease. This version number is stored in the
following places, all of which have to be changed:
<UL>
<LI> src/system.c (SyKernelVersion,SyWindowsPath)
<LI> lib/version.g (the version number printed as well as the test for the
kernel version)
<LI> doc/build/config.{install,new} (the version number printed in the
manual. Note that there are several variable that give suffix, Windows
directory name etc.)
</UL>
Make sure the machine to do the wrap has sufficient free diskspace (+1GB)
and has Type1 postscript TeX fonts, <tt>tth</tt>, </tt>zoo<tt> and
<tt>unzoo</tt> installed locally.
<P>
Go to the <tt>mkdistrib</tt> directory. Edit the file <tt>setvar</tt> to
make sure all variables (in particular place of wrapped files and CVS
access) are set properly.


<A NAME="rel"><H2>What extra has to be done for making a
prerelease a release</H2></A>

Finally, the CVS tag of the prerelease has to become a branch.

<LI>To be continued...

</BODY>
</HTML>

- The names and modules in doc/tut/authors.tex have to be brought up-to-date.

- Run tests:
  o The sanity test runs up to size 64 and degree 12 without problems.
  o The transitive groups construction (Alexander) runs correctly for all
    degrees.
  o The manual files should produce no discrepancies under doc/test/testexample
  o `testall' should produce no errors (also under Windows)
  o The error list from the bugfixes for the previous release  should
    produce no errors.

- Edit
    WWW/Util/DEFAULTS
    
    to give the new version number

See mkdistrib/HOWTO for how to do the actual wrapping

This directory contains files to wrap up a distribution of GAP4, compiling
GAP under linux and with the Winooze compiler, creating completion
files, running the test files, creating the manuals,
TeXing them, creating an html version and finally wrapping everything up.

The distribution is built under /scratch/gap4dist (this is set in `setvar')

The file `setvar' will need editing depending on the linux version used and
the cvs path.

Before you start, make sure to adjust the kernel version number for the
release, as well as the default windows path.
For this change the values of the variables `SyKernelVersion' and
`SyWindowsPath' in src/system.c and commit the  change.

The files assume that

- The current version is OK (testfiles &c.).
- packages to include in the main distribution are under
  /home/ftp/gappre/sys<version>
- share packages are in /home/ftp/gappre/share<version>
- deposited packages are in /home/ftp/gappre/dep<version>
- doc/build/config.install sets the right version number variables.
- cvs path set in `setvar'.
- standard `gcc' setup under linux
- The `cygwin1.dll' file for Windos resides under /gap/4.0/bin
- The wrapper scripts (in particular `zooit' and `setvar') reflect the
  latest version of GAP and `compile' and `windowscompile' give the right
  binary paths.

======

To build, go into this directory and call

  doit x 

where x is the number of the version (4rx) to be wrapped up.

After some time the program will prompt you to transfer a file to the
Windows machine, compile it there under cygwin and transfer the result back.
Then it continues zooing everything up.

On  Wedderburn checkout takes only a few minutes, but zooing
takes most of an hour. You can write the
announcement during this time.

The wrapping script (zooit) is designed to exploit a multi-processor
machine (zoo, zip and tar run in parallel) with a lot of memory (for 
file caches).

======

Transfer the files on the ftp server and ensure they install. (You'll need
to get Mac binaries from Burkhard!)

======

Remove the old version of GAP, and the bugfixes.

======

Create a branch for the version under cvs (this is commented out in the
wrapper scripts as it has been frequently necessary to call the building
process a second time because something was forgotten):

  cvs rtag -b GAP4RX 4.0

Afterwards it is possible again to check in changes.

======

cvs remove the old WWW/Manual4 manual (except index.html), unzoo the
htm_small.zoo file, cvs add its files and commit.
(Probably at some point change the WWW setup so that the manual is built
locally)

======

Edit /gap/WWW/Util/DEFAULTS to give the new version number, edit
WWW/Info4/{distrib.input,bugfixes.input,announce.input,changes.input} and
WWW/bib/cite4.input to reflect the new status. Make and commit.

======

Send out the announcement.

   Alexander Hulpke, 8-Dec-2000
