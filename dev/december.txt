% list of topics for a discussion.

1) Plan B:
    What do we do/what remedies are available if systems fail or people stop
    (temporarily or permanently) contributing?
    - CVS/ftp/WWW server failure, backups?
    - mailing lists  (miles replacement)
    - Kernel fixes
    - Bugfixes, Release wrapping
    - Answering ``standard'' questions/ ensuring questions get answered

2) Support I:
    How much support can we offer to people who want/offer to write/contribute
    code?
    - Answering questions
    - Internal documentation
    - Which areas would we like to be developed?
    - Code review for library contributions (desired/needed/necessary)?

3) Support II:
    How much work can we/do we want to put in answering questions?
    - Do we want to answer all questions? In which time?
    - Is the amount of ressources we spend on answers reasonable/Too much/Too
      little?
    - How do we respond to questions that are answered in the manual or on the
      web pages?
    - Should we have an FAQ? (for example for ``zip''-questions.)
    - How do we answer ``I would like code to do XYZ'' questions?
    - How do we deal with the increased support request at the start of a
      summer recess?
    - Do we want ``personalized'' responses to people who told us they got GAP?
    - Who is doing this?

4) Support III:
    What do we do with the Winooze/Mac versions and particular problems there?
    - Burkhard's plans/wishes (he seems to be the only one around able to
      compile a Mac version)

5) Required code:
    What functionality would be required to be able to do things some of us
    want to do? What shortcomings currently hinder or prohibit anyone to do
    certain things?

6) Unfinished Code:
    There is some code which would be useful to be part of an official release
    but which as far as I know is still at least some steps away from a release.
    Off the top of my head I can name:
    - KBMAG (documentation)
    - ANUPQ
    - Semigroup Todd-Coxeter/Low-index
    - ACE (hanging with referee)

7) Orphaned Code:
    Some (useful) code does not seem to have any maintainer left:
    - GUAVA

8) Bibliography
    I would think a reasonably full and up-to-date bibliography would be useful
    for grant applications and should be available for all system contributors.
    Unfortunately the version on the web page is severly outdated. 
    - Who is keeping the bibliography up-to-date?
    - Is this only a ``response'' job or proactive? (A lot of people do not tell
      us about their papers I fear.)
    - Is anyone building a list from the people who told us they got GAP?
    - Do we want to do anything else with other peoples papers using GAP? 

10) Council:
    What r^ole do we (that is the people who do the actual work for GAP) want
    the council to play? What do we expect them to do?
    What information should there be about the status of the packages in the
    refereeing process?
    Is there any sense to have ``area coordinators'' who do not do anything?

11) St Andrews:
    What r^ole does St Andrews (In particular the set-theoretic complement
    of {Steve}) see for itself in the future system development?
      (As far as I know, by now Isabel (who will finish her PhD in the next
      year I guess) and Steve are the only two people there who have any
      experience with writing nontrivial code. As this is not learned in two
      or three months, I also do not see anyone coming up to enlarge this
      group over the next year.)
    What ressources (in terms of people and money, existing and being applied
    for) for system development can be reasonably expected from St Andrews and
    is St Andrews willing to offer?
    What ``special billing'' in the credits do these justify?

12) Credits:
    How should system contributions be credited? Distinction between past
    contribution/current maintainance?
    How should the credits in the manual and the citation be? Which places
    should be named?

13) Modules:
    I would like to start modularizing the library. Some of the issues involved
    will be technical, some interact with crediting. I will send a proposal
    about this in the next weeks.
    - Modules vs. Sharepackages

14) Copyright:
    (I know you will all hate me for bringing this up again...):
    Do we want to keep the current copyright or change to GPL (Gnu licence)?
    The current licence keeps us out of some software distributions (e.g. Debian
    Linux)? I have been asked several times this summer by people to explicate
    the differences between the GAP licence and the GPL licence (respectively:
    explain Why we use another licence) and I had not really an idea.

    In short: I think it would be a good idea to change to a ``known'' license
    such as GPL, respectively I would like to have a concrete list of
    differences with explanations I could point such questions to.

15) Planned Work:
    I'd be curious to hear what things all of you plan to work on over the next
    year or so.

Some auxilliary points (Frank L.):

16) Some technical points:
    a) How to use libraries which use `malloc' inside GAP (my recent
       examples were the regex and readline libraries)
    b) Who knows why GAP still starts up so slowly and what is contained in
       the 16 MB after startup? How difficult is it to do something about
       it?
    c) The old .zoo, .zip, .tar.gz question. (To remember it: The wrapping 
       of share packages seems to assume that all files are text files.)
    d) Isn't TransposedMat an "arithmetic operation" rather than an
       attribute (mutability)?
    e) Any new ideas for the difficult problem of method selection/ type
       determination of lists?
    f) GlobalVarList: Kill unbound entries, don't include (mistyped) names
       which are not used.

17)  WWW-pages and license. Idea (from recent discussion): Change license of
     GAP to GPL or similar. But maybe have a GAP-Logo with a strong license. 
     It is only allowed on and should be on "official" Web-pages of GAP
     (a term which, of course, has to be defined).

18)  Talk on GAPDoc package by Frank and Max.


