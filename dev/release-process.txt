
Release Processes -- Agreed version
===================================

This proposal aims to set up a framework for future releases of GAP. What it
tries to achieve is:

- New releases should be possible with a sensible frequency (Considering
  work, amount of features, and  installation lethargy, a generous year
  between releases  seems to us to be the best realistic choice).

- All people involved with the release should get a clear idea about the
  status of the release and what they are expected to do for it.

- There should not be confusion about what features will be (have to be) in
  the release or their implementation status.

- Critical time periods (for example final checks) should neither
  predictably fall in a period of high extraneous demands (i.e. exam periods
  in one place) and give sufficient response time to people in another time
  zone or a few hours without email.

- No testing work (also by external people, such as package authors !)
  should be wasted on versions that are known to be never a release.

  After the previous release
  --------------------------

What these requirements boil down to is that it should be clear early on
what will be in the release and when (or whether) it will be finished. For
this purpose it is suggested to maintain two lists (kept under CVS, say) of
features:

1) The first (dev/essential4rx.txt) is a list of ''sine qua non'' features
   for the release, i.e.  features without which the release cannot be. We
   should agree on these features at least on the same level as proposal.
   Proposing a feature should (usually) come with some idea about the
   implementor and implementation time.

   This list should be established soon after the previous release (though
   it is perceivable that problems crop up later that force us to extend the
   list -- however this should be considered an exception.)

2) The second list (dev/wishlist4rx.txt) covers other planned features that
   are not essential and will go in depending on their status by the time of
   the release.

While these lists are intended mainly for our purposes there is no reason
why packages shouldn't be listed in them as well. This will not be the
default (neither are package authors forced to use it, nor is it guaranteed
that these lists will incorporate all (or any) package changes, but it is
perceivable that there will be situations in which we want particular
packages to be available).

We should also agree on when (roughly) we want to do the next release. (This
might affect the acceptability of ``must have'' features.

Furthermore, for preparing the release announcement we need a list of all
new features (dev/NEWFEATURES) and bugs corrected (it will be easiest to
collect them in a section in BUGFIX, even if newer fix announcements do not
loist all older fixes explicitly.) This means that we have to keep at least
this part of BUGFIX up-to-date until the release.
Also errors that came up privately should be listed in this file.

  Getting the release ready
  -------------------------

About three months before a planned release we should investigate the
status of these two wish-lists. Unfinished non-essential features for the
release should not go in after this point.

As long as not all ''sine qua non'' features are available we do not proceed
further towards a release.

At this point we also should agree about missing manual sections (if any)
and get in at least section headers so that one can cross-reference against
the manual.

Let us assume now we have passed this mark and the system contains the
features for the release (and no new features will get in) and the manual is
in its section structure stable.

Assume further that we would like to start the wrapping process in two
months time, denote this day as Day X.

We now write to package authors and tell about the plans for a new release,
that refer to Day P (two weeks before Day X) as the approximate start of
wrapping. 
We will send out a mail to the package authors two days before day P.
Changes done after day P to the package archive:
a) Might not make it in the release because they came after we fetched the
   package,
b) Will not be tested for incompatibilities (namespace for example) with
   other packages
(This is intended only as a service for package authors to remove
incompatibilities, it is not intended to force them to release with us.
the reason for the difference between Day X and Day P is that Day P will
probably prompt several package authors to report bugs they found.)

We also wrap a simple archive (tar.gz, say) of the development version that
Package authors can use to build (if they want) a new package manual and to
test for potential incompatibilities. This archive should be updated
automatically once a week.

The tasks for the release now are:
- All reported bugs/problems are fixed.
- Tests (is the system correct?)
- Tests for different architectures.
- Completing the manuals (updates of features that are found to have
  changed, open crossreferences, example tests,...)
- Creating a release announcement and a feature list for the release
- The most recent versions of all packages should load/run without problems.
  (Change of internal undocumented functions, name clashes between
  packages,...)
(We should reserve at least two months for completing these tasks.)

For each of these tasks we designate one person that is to give an OK in
this area (either by doing it themselves or by delegation). Wrapping of
(pre)releases will only start if all areas are OK.

Two weeks before Day X there will be the above mentioned second letter to
package authors about the start of wrapping, this give sus a bit time to do
final compatibility tests and to act on bugs reported by package authors.

  (Pre)releases
  -----------

Now the system should be basically ready for a release. All changes done
should be considered as bugfixes. (It might be even desirable to split off
the release branch in CVS now.)

Prereleases should be (at the point of their release) as correct, complete
and stable as a final release (if features are known to be missing, there
should not be a formal prerelease). This includes manuals, packages, features
list and announcement. (The previous phase should have taken care of this.)

The prerelease then should be tested on all architectures (in particular
care has to be taken for architectures such as Windows which the developers
do not use themselves). It will get distributed to the usual tester group,
however not be announced elsewhere publicly. (In general all public remarks
about a coming release should be suitably vague until we really have the
release finished.)

Once all tests have succeeded and no serious bugs did arise within two
weeks, the *same* files (no new rewrap -- this might introduce further
problems) of the prerelease should be released as release. 
Thus prereleases will have to have the same version number as the release,
in consequence it might be useful to go to a third level of minor numbers
and use, say, 4.3.0, 4.3.1, and so on; the released version thus might be
4.3.2, say. It might be convenient to continue this numbering scheme with
bugfixes.

Serious bugs in this context means:
- Calculations that give a wrong result
- Error messages caused by calculations that the manual claims (or we agree)
  GAP can do.

If, on the other hand, there were serious bugs, there has to be a new
prerelease with a new two weeks testing period. In the best of all worlds
there should be only one prerelease, but with some care it should certainly
be possible to avoid more than two.
