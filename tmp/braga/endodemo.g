##################################################################
##
##	Endomorphisms semigroup of S5
##	Build End( S5 )
##	
##
##################################################################

##################################################################
##
##  Part 1.  
##  
##	Create End( S5 )
##		- build a generating set
##		- create the semigroup End( S5 )
##		- check is has the right size
##		- create an ismorphism to a semigroup of transformations
##		- get the range of the isomorphism
##		- check that calculating the size of this last semigroup
##			is much faster than the precious calculation
##

##	The size of End( S5 ) is known to be 146.
##
##  An endomorphism of S5 has kernel S5, A5 or the trivial subgroup,
##	since these are the only normal subgroups of S5.
##	The ones with trivial kernel are the automorphisms, and
##	are generated by
##		x -> gens^-1 * x * gens
##	for each gens, generator of S5; the one with kernel S5 is the 
##	one mapping everything to	the identity of S5; finally the ones 
##	with kernel a5 map all even permutations to the identity and 
##	odd permutations to non identity ones. To get this last oned
##	we have to have in the generating set the following homomorphisms:  
##		x -> () if x is even; (1,2) otherwise
##		x -> () if x is even; (1,2)(3,4) otherwise 
##
##	We then create the semigroup generated by those generators
##	and check it has size 146.

# the symmetric group on five points and its alternating subgroup
s5 := SymmetricGroup( 5 );
a5 := AlternatingGroup(5);

# generators for the symmetric group
ggens := GeneratorsOfGroup( s5 );

# and the group homorphisms that will generate the 
# semigroup of endomorphisms
endo1 := GroupHomomorphismByFunction(s5, s5, 
				 x->ggens[1]^-1*x*ggens[1], x->ggens[1]*x*ggens[1]^-1);
endo2 := GroupHomomorphismByFunction(s5, s5, 
					 x->ggens[2]^-1*x*ggens[2], x->ggens[2]*x*ggens[2]^-1);
endo3 := GroupHomomorphismByFunction(s5, s5,
					function(x) if x in a5 then return (); 
					else return (1,2); fi; end);
endo4 := GroupHomomorphismByFunction(s5, s5,
					function(x) if x in a5 then return (); 
					else return (1,2)*(3,4); fi; end);

# building the semigroup and asking for its size 
semiendos:= Semigroup( endo1, endo2, endo3, endo4);
Size( semiendos);


##################################################################
##
##  Part 2. 
##
##	Investigate the Green's structure of End( S5 ) 
##		-	build an ismorphism to a transformation semigroup
##		- get the transformation semigroup
##		- investigate the Green's strucure of the transformation
##			semigroup obtained
##		- get its J classes 
##		-	sizes of each of the J classes
##		- identify the poset of J classes 
##		- investigate each of the J classes
## 

##	In general, calculations are perfomed much faster in transformations
##	semigroups. That is the reason why we should get the transformation
##	semigroup ismnorphism to End( S5 )	

RequirePackage("transemi");

# building the isomorphism and getting its range
it := IsomorphismTransformationSemigroup(semiendos);    
tsemiendos := Range(it);

# Greens R, L and D relation on tsemiendos
r := GreensRRelation( tsemiendos );;
l := GreensLRelation( tsemiendos );;
d := GreensDRelation( tsemiendos );;

# the D classes of the semigroup and its sizes
d_classes := GreensDClasses( tsemiendos );;
Size( d_classes ); 
Size( d_classes[1] );
Size( d_classes[2] );
Size( d_classes[3] );
Size( d_classes[4] );

# find a multiplicative zero and check it is in d_classes[4]
zero := MultiplicativeZero( tsemiendos );
zero in d_classes[4]; 

# find a multiplicative neutral element and check it is d_classes[1]
neutral := MultiplicativeNeutralElement( tsemiendos );
neutral in d_classes[1];

# check the order relation between the other two D classes
IsGreensLessThanOrEqual( j_classes[3], j_classes[2] );   

# find out the L and R structure of each of the D classes
rclass1 := GreensRClasses( d_classes[1] );;
Size( rclass1);                  
lclass1 := GreensLClasses( d_classes[1] );;
Size( lclass1 );                  
rclass2 := GreensRClasses( d_classes[2] );;
Size( rclass2 );
lclass2 := GreensLClasses( d_classes[2] );;
Size( lclass2 );
rclass3 := GreensRClasses( d_classes[3] );;
Size( rclass3 );
lclass3 := GreensLClasses( d_classes[3] );;
Size( lclass3 );

