%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  fpsemi.msk                GAP documentation                Isabel Araujo
%%
%A  @(#)$Id: fpsmg.msk,v 1.3 1999/05/14 20:20:35 andrews Exp $
%%
%Y  (C) 1999 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%


\Chapter{Finitely Presented Groups and Semigroups}

A *finitely presented semigroup* (resp. *finitely presented monoid*,
*finitely presented group*)
is a quotient of a free semigroup (resp. free monoid, free group) 
of finite rank by a finitely generated congruence.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Creating Finitely Presented Semigroups and Monoids }

In {\GAP} finitely presented semigroups (resp. monoids) are created 
by factoring a free semigroup by a set of relations.  
Relations are entered as pairs of words in the generators of  
the free semigroup. 

\Declaration{FreeSemigroup}

\>`<F>/<rels>'.

creates a finitely presented semigroup given by the presentation
$\langle<gens>\mid<rels>\rangle$ where <gens> are the generators of the free
semigroup <F>.

\beginexample
gap> f:=FreeSemigroup(3);;
gap> s:=GeneratorsOfSemigroup(f);;
gap> f/[ [s[1]*s[2]*s[1],s[1]] , [s[2]^4,s[1]] ];
<fp semigroup on the generators [ s1, s2, s3 ]>
\endexample

Similarly, finitely presented monoids are obtained by factoring a free
monoid (created using {\tt FreeMonoid}) by a set of relations. 
The result obtained is a finitely presented
semigroup.
Relations are entered as pairs of words in both the
identity and the generators of the free monoid.

\beginexample
gap> f := FreeMonoid( 3 );
<free monoid on the generators [ m1, m2, m3 ]>
gap> x := GeneratorsOfMonoid( f );
[ m1, m2, m3 ]
gap> e:= Identity ( f );
<identity ...>
gap> m := f/[ [x[1]^3,e] , [x[1]*x[2],x[2] ]];
<fp semigroup on the generators [ <identity ...>, m1, m2, m3 ]>
\endexample

Finally, finitely presented groups are created by factoring a free
group (created by using {\tt FreeGroup}) by a set of relators.
Relators are entered as words in the alphabet formed by the 
identity, the generators of the free group and their inverses.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

\Section{Some remarks about the objects that {gap} creates}

First note that is not possible to refer to the generators of a semigroup,
monoid or group by their names.
These names are not variables, but just display figures.
So, if to access the generators by their names, we first have to 
introduce the respective variables and to assign the generators to them.

\beginexample
gap> f:=FreeSemigroup("a","b");;
gap> x:=GeneratorsOfSemigroup(f);;
gap> s:=f/[ [x[1]*x[2],x[2]*x[1]] ];;
gap> a;
Variable: 'a' must have a value
gap> a:=GeneratorsOfSemigroup(s)[1];
a
gap> b:=GeneratorsOfSemigroup(s)[2];
b
gap> a in f;
false
gap> a in s;
true
\endexample

Also note that the generators of the free semigroup (resp. monoid, group) 
are different from the generators of the finitely presented semigroup 
(resp. monoid, group) - even though they are displayed by the same names). 
This means that words in the generators of the free semigroup are not
elements of the finitely presented semigroup (resp. monoid, group). 
Conversely elements of the finitely presented semigroup are not words.

\beginexample
gap> a in f;
false
gap> a in s;
true
gap> 
\endexample

\beginexample
gap> a*b=a^5;
false
gap> a^5*b^2*a=a^6*b^2;
true
\endexample

Such calculations comparing elements of an finitely presented semigroup
may run into problems:
there are finitely presented semigroups for which no algorithm exists 
(it is known that no such algorithm can exist) that will tell for two 
arbitrary words in the generators whether the corresponding elements 
in the finitely presented semigroup are equal.
Therefore the methods used by {\GAP} to compute in finitely
presented semigroups may run into warning errors, run out of memory or run
forever. If the fintely presented semigroup is (by theory) known to be 
finite the algorithms are guaranteed to terminate (if there is sufficient 
memory available), but the time needed for the calculation cannot be 
bounded a priori. See "Knuth Bendix Procedure".

Note than elements of a finitely presented semigroup are not printed 
in a unique way.

\beginexample
gap> a^5*b^2*a;
a^5*b^2*a
gap> a^6*b^2;
a^6*b^2
\endexample

Factoring a free monoid by a set of relations 
creates in {gap} a finitely presented semigroup.
In the group case it is also possible to obtain a semigroup presentation
for the group. This is done by creating an isomorphism from the group
to an isomorphic finitely presented semigroup.

\Declaration{IsomorphismFpSemigroup}
\> `Range( <phi> )'.

returns the image of the isomorphism phi.

\beginexample
gap> f := FreeGroup(2);
<free group on the generators [ f1, f2 ]>
gap> gens := GeneratorsOfGroup( f ); 
[ f1, f2 ]
gap> g := f/[ gens[1]^3, gens[2]^3 ];  
<fp group on the generators [ f1, f2 ]>
gap> phi := IsomorphismFpSemigroup( g );
MappingByFunction( <fp group on the generators 
[ f1, f2 ]>, <fp semigroup on the generators 
[ <identity ...>, f1^-1, f1, f2^-1, f2 ]>, function( x ) ... end )
gap> s := Range( phi );
<fp semigroup on the generators [ <identity ...>, f1^-1, f1, f2^-1, f2 ]>
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Comparison of Elements of Finitely Presented Semigroups}

\>`<a> = <b>'.
 
for two elements of a finitely presented semigroup. 

Two elements of a finitely presented semigroups are equal if they are equal in
this semigroup. Nevertheless they may be represented as different words in the
generators. Because of the fundamental problems mentioned in the
introduction to this chapter such a test may take forever.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Preimages in the Free Semigroup}

\Declaration{FreeSemigroupOfFpSemigroup}
\Declaration{FreeGeneratorsOfFpSemigroup}
\Declaration{RelationsOfFpSemigroup}

\beginexample
gap> f := FreeSemigroup( "a" , "b" );;
gap> a := GeneratorsOfSemigroup( f )[ 1 ];;
gap> b := GeneratorsOfSemigroup( f )[ 2 ];;
gap> s := f / [ [ a^3 , a ] , [ b^3 , b ] , [ a*b , b*a ] ];             
<fp semigroup on the generators [ a, b ]>
gap> Size( s );
8
gap> FreeSemigroupOfFpSemigroup( s ) = f;
true
gap> FreeGeneratorsOfFpSemigroup( s );
[ a, b ]
gap> RelationsOfFpSemigroup( s );
[ [ a^3, a ], [ b^3, b ], [ a*b, b*a ] ]
\endexample

Elements of a finitely presented semigroup are not words, but are represented
using a word from the free semigroup as representative. 

\>UnderlyingElement( <elm> ) O 

If <elm> is an element of a finitely presented semigroup, it 
returns the word from the free semigroup that is used as a
representative for <elm>.

\beginexample
gap> w := GeneratorsOfSemigroup(s)[1] * GeneratorsOfSemigroup(s)[2];
a*b
gap> IsWord (w );
false
gap> ue := UnderlyingElement( w ); 
a*b
gap> IsWord( ue );
true
\endexample

\Declaration{ElementOfFpSemigroup}
\beginexample
gap> ge:=ElementOfFpSemigroup( FamilyObj( GeneratorsOfSemigroup(s)[1]), a*b ); 
a*b
gap> ge in f;
false
gap> ge in s;
true
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Knuth Bendix Procedure}

One of the important tools for the examination of finitely presented 
semigroups is the Knuth-Bendix procedure for strings, which manipulates 
a rewriting system of the semigroup and attempts to 
make it confluent (See Sims ``Computation with Finitely Presented Groups''). 
Once confluence is achived, it is possible to successfully test that
two words represent the same element in the semigroup, by reducing
both words using the rewriting system rules. 
Since the word problem for semigroups is not solvable in general, 
Knuth-Bendix procedure cannot always terminate.

\Declaration{KnuthBendixRewritingSystem}
\>KnuthBendixRewritingSystem(<S>,<lessthanorequal>)

creates the Knuth Bendix rewriting system of the finitely presented
semigroup <S> unsing the reduction ordering given by <lessthanorequal>
(lessthanorequal(<a>,<b>) returns true iff <a> is less than  <b> in the order 
corresponding to lessthanorequal). 

\beginexample
gap> f := FreeSemigroup( "a" , "b" );;
gap> a := GeneratorsOfSemigroup( f )[ 1 ];;
gap> b := GeneratorsOfSemigroup( f )[ 2 ];;
gap> g := f /  [ [ a^2 , a*b ] , [ a^4 , b] ];;
gap> kbrws := KnuthBendixRewritingSystem( g );
Knuth Bendix Rewriting System for Semigroup( [ a, b ] ) with rules 
[ [ a*b, a^2 ], [ a^4, b ] ]
gap> IsConfluent( kbrws );
false
gap> MakeConfluent( kbrws );
gap> Rules( kbrws );
[ [ a*b, a^2 ], [ a^4, b ], [ b*a, a^2 ], [ b^2, a^2 ] ]
gap> IsConfluent( kbrws );
true
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%E
