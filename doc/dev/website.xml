
<!-- 

  website.xml          GAP documentation    

  Copyright (C) 2005,  The GAP Group

Maintaining www.gap-system.org

-->

<Chapter Label="Chap-GAPWeb">
<Heading>Maintaining the &GAP; website</Heading>

This chapter describes how the information accessible on 
<URL Text="www.gap-system.org">http://www.gap-system.org/</URL> is stored 
and collected, and how it is transformed into web pages.

<Section Label="WPOverview">
<Heading>Overview</Heading>

The &GAP; website (in the following just called <Q>website</Q>) has 
a tree structure for easier navigation and overview. Each node and each
leaf of the tree is a web page. Every single page 
resides somewhere in this tree. This position is shown in the
navigation bar on the left hand side, and the user can navigate through
the tree using this navigation bar. However, pages can still link to other
pages that reside in some other branch of the tree. 

<P/>
With very few exceptions, all pages are static HTML pages conforming to
the XHTML 1.0 standard (see Section <Ref Sect="WPXHTML"/>). However, these
pages are not edited directly by the maintainer, but they are produced
by a tool called <Q>the <Package>Mixer</Package></Q> (see <Ref
Sect="WPMixer"/>), which takes so called <Q><F>.mixer</F>-files</Q>
as source and produces the final HTML files. During this process,
the navigation bar and some other parts of the page are created
automatically, such that the maintainer does not have to worry about
technicalities. A <F>.mixer</F> file essentially contains the content of
the page in form of a well-formed XML document (see again Section <Ref
Sect="WPXHTML"/> for an explanation) and the <Package>Mixer</Package> 
handles the technical details.

<P/>
All the sources for the web pages are kept in the St Andrews CVS repository
under the directory <F>WWW2</F>. Everybody having developer access
can check out a copy of the pages. The web server in St Andrews
also checks out a copy, runs the <Package>Mixer</Package> and then serves
the pages. However, the web server does not use the latest revision of
each file, but it uses the so called <Q>published</Q> version. That is,
usually the maintainer of the web pages decides, which version of the
source file in the CVS repository is the one being published. He does this
by putting a certain <Q>tag</Q> on that version using CVS 
(see Section <Ref Sect="WPCVS"/>).

<P/>
The &GAP; website has some pages that are treated specially such as
the &GAP; manuals, the pages for the &GAP; packages, the pages
providing search facilities, the pages for the &GAP; bibliography, the
sitemap, and the (old) &GAP; forum archive. The setup for these special
pages is described in Sections <Ref Sect="WPManuals"/> to 
<Ref Sect="WPForum"/> in this chapter.

<P/>
In the following sections we first cover the <Package>Mixer</Package>, the 
web standard XHTML 1.0, the usage of CVS for the web pages, and the
installation of the web site on the web server.

<P/>
To get started as a maintainer you need the following things on your
machine:

<List>
    <Item> a CVS client </Item>
    <Item> a C compiler (for compiling parts of the <Package>Mixer</Package>)
    </Item>
    <Item> a <URL Text="Python">http://www.python.org/</URL> interpreter 
           (for running the <Package>Mixer</Package>)
    </Item>
    <Item> a web browser (to view the resulting pages)
    </Item>
    <Item> an <F>ssh</F> client to be able to update the web pages on the
           web server in St Andrews, note that you also need access
           authorisation from there
    </Item>
</List>

Then you have to check out a working
copy of the web pages (see Section <Ref Sect="WPCVS"/>), install the 
<Package>Mixer</Package> (see Section <Ref Sect="WPMixer"/>), and run
it. After that you can look at your copy of the web pages and start to
make changes. Finally you have to acquire <F>ssh</F> access to the 
web server in St Andrews to update the pages there, if you do not
want to rely on the nightly automatic update scripts (see Section
<Ref Sect="WPyin"/>).

</Section>

<Section Label="WPMixer">
<Heading>The Mixer</Heading>

The <Package>Mixer</Package> is a Python script that uses a C-library to
parse XML documents (see Section <Ref Sect="WPXHTML"/>). Therefore this
library (which comes with the <Package>Mixer</Package>) has to be compiled
first.

<P/>
The <Package>Mixer</Package> is stored in and can be acquired from the
directory <F>Mixer</F> in the St Andrews CVS repository. That is, the
easiest way to get it is to use

<Verb>
    cvs -d :pserver:gap@cvs.gap-system.org:/gap/CVS co Mixer
</Verb>

which assumes that you already did a <C>cvs login</C> (see Chapter 
<Ref Chap="Chap-CVS"/>).

<P/>
The above command creates a directory <F>Mixer</F> in the current directory.
In that directory you can create the manual of the <Package>Mixer</Package>
by doing <Q><C>make mixer.pdf</C></Q> provided you have an installation of
&LaTeX; on your machine. In this manual, the <Package>Mixer</Package>
is described in detail, including its installation.

<P/>
Alternatively you can download a copy of the <Package>Mixer</Package>
and its documentation
from 
<URL Text="this page">
http://www.math.rwth-aachen.de/~Max.Neunhoeffer/Computer/Software/mixer.html
</URL>.

<P/>
A small comment on the rationale behind the <Package>Mixer</Package> might
be in order. The fact that the input of the <Package>Mixer</Package>,
that is the <F>.mixer</F>-files have to be well-formed XML documents
(see Section <Ref Sect="WPXHTML"/>) might at first sight be considered
inconvenient and a bit awkward. However, this fact greatly improves the
chances that the resulting HTML files conform to the XHTML 1.0 standard
and at the same time lead to the fact that the <Package>Mixer</Package>
is able to give very concise and usable error message during parsing
in case something is not well-formed. This together with the automatically
generated navigation bar makes the <Package>Mixer</Package> a valuable tool
for the creation of web pages.

<P/>
Note in particular that the tree structure of the whole web site is
controlled by the <F>tree</F> files in each subdirectory, exactly as
described in the manual of the <Package>Mixer</Package>.

</Section>

<Section Label="WPXHTML">
<Heading>XHTML</Heading>

The HTML language has undergone a series of revision and standardizations.
One major step was to make an HTML standard that conforms to the XML
standard which happened with the revision <Q>XHTML 1.0</Q> of the
HTML standard. This step was important because the XML framework
makes it much easier to parse such documents automatically and check
for <Q>well-formedness</Q>. Here, the term <Q>well-formed</Q> means
that the document fulfils a set of syntactic rules. That is, a document
might be well-formed and at the same time not make any sense.
See <URL Text="this page">http://www.w3.org/TR/xhtml1/</URL> for details.
A short introduction to the XML standard can be found in
Section <Ref Sect="XML" BookName="GAPDoc"/>  in the &GAPDoc; manual.
<P/>

The &GAP; web pages should conform to the standard XHTML 1.0.
To cut a long story short, this means a few restrictions on the markup
to use. Here we quickly cover the most important things, which should
enable anybody who has ever seen an HTML document of any version
to get started.

<Enum>
<Item>
All tags must be written with lower case letters in the element names.
</Item>
<Item>
All non-empty elements must have a start- and end-tag, in particular
enclose paragraphs in <C>&lt;p&gt;</C> and <C>&lt;/p&gt;</C> or list 
entries in <C>&lt;li&gt;</C> and <C>&lt;/li&gt;</C>.
</Item>
<Item>
Elements must be properly nested like brackets, that is things like
<C>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</C> are not allowed.
</Item>
<Item>
Attributes always must have an assigned value and the value must be
enclosed by either double or single quotes; for example
<C>&lt;a href="http://www.gap-system.org"&gt;GAP site&lt;/a&gt;</C>.
</Item>
<Item> Write empty elements like <C>&lt;br /&gt;</C>, the space before the
<C>/</C> is not necessary according to the specification but it helps
some old browsers to interpret it correctly.
</Item>
<Item> Do not put information on colors or fonts in the XHTML file. Instead
use the <C>.css</C> style sheet file. (For complicated cases use the
<C>class</C> attribute to mark elements for which you want to give special
formating rules in the style sheet.
</Item>
<Item> The XML markup characters <Q><C>&lt;</C></Q>, <Q><C>&amp;</C></Q>, and 
    <Q><C>&gt;</C></Q>
    must be entered as <Q><C>&amp;lt;</C></Q>, <Q><C>&amp;amp;</C></Q>, 
    and <Q><C>&amp;gt;</C></Q>
    respectively. There are quite a few such <Q>entities</Q> which are
    defined to enter special characters. See
    <URL Text="this page">http://www.w3.org/TR/xhtml1/Overview.html#h-A2</URL>
    for details.
</Item>
</Enum>

Using the <URL Text="W3C">http://www.w3.org/TR/html401/</URL> 
specification
<URL Text="HTML 4.01">http://www.w3.org/TR/html401/</URL> - this includes 
a nice <E>elements</E> overview - together with the above rules and 
the general rule to avoid complicated looking constructs when possible,
we found it not too difficult to produce sets of valid web pages.


</Section>

<Section Label="WPCVS">
<Heading>CVS usage</Heading>

We assume here that you are familiar with the standard CVS commands
<Q><C>cvs login</C></Q>, <Q><C>cvs checkout</C></Q>, <Q><C>cvs update</C></Q>,
<Q><C>cvs commit</C></Q>, and such as described in the cvs manual or in
Chapter <Ref Chap="Chap-CVS"/>.

<P/>
The source files for the web site are in the same CVS repository than
the &GAP; source code. They reside in the directory <F>WWW2</F>, that is,
you can check out a working copy by doing

<Verb>
    cvs -d :pserver:gap@cvs.gap-system.org:/gap/CVS checkout WWW2
</Verb>

which assumes that you already did a <C>cvs login</C> (see Chapter 
<Ref Chap="Chap-CVS"/>). This command creates a directory <F>WWW2</F>
in your current directory containing the complete source tree of the
web site.

<P/>
Source files are treated like any other source file in the CVS repository,
that is you can update, modify, commit, add, remove them as usual.
See Chapter <Ref Chap="Chap-CVS"/> for details.

<P/>
The only thing one has to understand with respect to CVS is how one
tags a certain revision of a file for publication. The CVS system
already has the facility to mark revisions with tags. The only
convention used for the &GAP; web site is, that the <Q>published</Q>
version of each file is the one having the <Q>PUB</Q> tag attached
to it.

<P/>
That is, to publish for example the latest revision of the file
<Q>index.mixer</Q> in the current directory you have to issue the
command

<Verb>
    cvs tag -F PUB index.html
</Verb>

Note that CVS does not do a revision control of tags and that this command
directly changes the repository in the way that any old tag <Q>PUB</Q>
is removed from this file and is attached to the latest revision of this
file. The <Q><C>cvs tag</C></Q> command works recursively, so be careful to
always give some argument to it, otherwise it tags recursively all files
below the current directory!

<P/>
Also note that this <Q>publication</Q> does not automatically change anything
on the web server, you have to run the update scripts in St Andrews as 
described in Section <Ref Sect="WPyin"/> or wait for the nightly
automatic run of that script.

<P/>
A little comment on the rationale behind this setup might be in order.
This setup allows that more than one person works independently on the
web pages and those people exchange versions via CVS, without publishing
them immediately. 

<P/>
By convention, it should usually be the maintainer of the web pages
who tags new revisions of files for publication, because it is his
responsibility which version to publish. The actual guidelines who
does what in this process should be agreed on separately.

<P/> There is one little technical problem with files being removed.
Because the web server update scripts check out the tagged version and
CVS does not have a way to tag a <Q>removed</Q> version of a file one
has to remove the <Q>PUB</Q> tag explicitly <E>after the file has been deleted
</E>!  This is for example done for the file <F>index.mixer</F> with the 
following command

<Verb>
    cvs tag -d PUB index.mixer
</Verb>

After that, the update scripts on the web server in St Andrews will remove
the file automatically, because no revision is tagged for publication any
more. Again, be careful with this command as tags are not under revision
control in CVS and a minor typo can delete all publishing tags completely!

</Section>

<Section Label="WPyin">
    <Heading>The web server in St Andrews</Heading>

Currently, the following machine in St Andrews holds the actually
published version of the web site:

<Verb>
    yin.mcs.st-andrews.ac.uk
</Verb>

This machine is not really the web server, but the real web server mounts
the data from <F>yin</F> via NFS.

<P/>
The published version is checked out in the directory <F>/gap/WWW</F>. Note
that for technical reasons this directory is a checked out version
of the <F>WWW2</F> directory in CVS.
The web server mounts and serves the directory <F>/gap/WWW</F>.

<P/>
The <Package>Mixer</Package> is checked out and installed in the directory
<F>/gap/Mixer</F> and thus can be called with the command

<Verb>
    /gap/Mixer/mixer.py
</Verb>

<P/>
The files are checked out with ownership <F>gapchron</F> which is a
user on <F>yin</F> with the same numerical user ID than the <F>gap</F>
user. In other words, one has to be the user <F>gap</F> to manipulate
the data. Note that the home directory of the user <F>gap</F> is in fact
<F>/gap</F>.

<P/>
To get access to this data the easiest and most secure way is probably
to create an RSA key pair, append the public key to
<F>/gap/.ssh/authorized_keys</F> and to keep the private key in the
<F>.ssh</F> subdirectory of the user's home directory.

<P/>
There is one shell script which is run by a cron job every night performing
an update of the web pages. This script is in <F>/gap/WWW/makeupdate</F>.
It basically checks out the published version and runs the
<Package>Mixer</Package>. You can trigger the update manually
by doing

<Verb>
   ssh gap@yin.mcs.st-andrews.ac.uk /gap/WWW/makeupdate
</Verb>

once you have <C>ssh</C> access to <F>yin</F>.

<P/>
Before performing an update on <F>yin</F>, it is wise to check first 
whether the <Package>Mixer</Package> runs without
an error message in your own checked out version of the website.

</Section>

<Section Label="WPInstall">
<Heading>Installation on the web server</Heading>

This section describes the procedure to install the &GAP; web site on
a machine from scratch. Thus, this section is usually not needed 
because all this is already done on the machine
<F>yin.mcs.st-andrews.ac.uk</F>. However, if one wants to have an exact
copy of the web site or have to install it somewhere anew, this
section is needed. This section is derived from the ASCII document
<F>WWW2/INSTALL</F> in the CVS repository.

<Subsection>
<Heading>Needed ingredients</Heading>

<List>
<Item>
  standard tools: <C>cvs</C>, <C>tar</C>, <C>gzip</C>, <C>make</C>, <C>sh</C>
</Item>
<Item>
  a C-compiler, preferably <C>gcc</C>
</Item>
<Item>
  <Package>Python</Package> version 2.2 or later (for running the 
  <Package>Mixer</Package>)
</Item>
<Item>
  <C>xfig</C>, <C>fig2dev</C> if you want to edit the sitemap
</Item>
<Item>
  a web server if pages shall be published
</Item>
<Item>
  a copy of the full <F>doc</F> directory from a &GAP; installation for 
    references into the manual (this can reside on some web site)
</Item>
<Item>
  facility to run CGI-scripts for feedback pages
</Item>
<Item>
  setup for automatic creation of the pages for packages
</Item>
<Item>
  the <C>swish</C> utility for the creation of the search indices
</Item>
</List>

</Subsection>

<Subsection>
<Heading>Installation procedure</Heading>

<Enum>
<Item>
Checkout the WWW2 directory tree from CVS:

<Verb>
    cvs -d :pserver:gap@cvs.gap-system.org:/gap/CVS checkout -r PUB WWW2
</Verb>
             
This creates a subdirectory <F>WWW2</F>, containing the files of the whole 
site which are tagged as <C>PUB</C>.
</Item>

<Item>
Checkout and install the mixer:
             
<Verb>
    cvs -d :pserver:gap@cvs.gap-system.org:/gap/CVS checkout Mixer
    cd Mixer 
    make     
    make mixer.pdf
    cd ..    
</Verb>

This creates a subdirectory <F>Mixer</F> in the current directory.
</Item>

<Item>
Unpack some (frozen) subtrees, which are in archives:
             
<Verb>
    cd WWW2  
    gzip -dc ForumArchive.tar.gz | tar xvf -
    cd Gap3  
    gzip -dc Manual3.tar.gz | tar xvf -
    cd ..    
</Verb>
</Item>      

<Item>
Edit <F>WWW2/lib/config</F>, see that file for instructions:

<Verb>
    vi lib/config
</Verb>
             
    In this file a few variables have to be defined to adapt the web pages
    to the local conditions.
</Item>

<Item>
Copy a whole <F>doc</F> directory of a &GAP; distribution to the place 
mentioned in <F>WWW2/lib/config</F> (see step 4.) in the variable
<C>GAPManualLink</C> (this is <F>WWW2/Manuals</F> in the current setup).
</Item>

<Item>
The files for the &GAP; bibliography have been included into this
tree in the CVS.
             
<P/>
Create the html and PDF versions by:
             
<Verb>
    cd Doc/Bib
    gap4 convbib.g
    cd ../.. 
</Verb>
             
Some more information about this is in <F>WWW2/Doc/Bib/INFO</F>.
</Item>

<Item>
Create a symbolic link <F>WWW2/index.html</F> to <F>gap.html</F> to hide
the directory:

<Verb>
    ln -s gap.html index.html
</Verb>
</Item>

<Item>
Install search facility:
             
<P/>
    Things are in <F>WWW2/Search</F>. You need the <C>swish</C> utility 
    installed to create the index files for searching. Create a link in
the <F>Search</F> directory to the swish executable.
    Then create index files by:
             
<Verb>
    cd Search
    ln -s PATHTOSWISH swish
    make
    cd ..
</Verb>

(<F>PATHTOSWISH</F> has to be replaced by the path to the swish executable.)

<P/>
The CGI script <F>WWW2/Search/search.cgi</F> will take care of the rest.
</Item>

<Item>
Install package manuals:

<P/>
    Copy the result of Frank's scripts to the place mentioned in 
    <F>WWW2/lib/config</F> (in the variable <F>pkgmixerpath</F>).
    (currently, this is <F>WWW2/Manuals</F>, copy the whole <F>pkg</F> 
    directory)

<P/>
    To update the package pages, copy all <F>.mixer</F> files and 
    <F>pkgconf.py</F> to <F>WWW2/Packages</F> and rerun the 
    <Package>Mixer</Package>.
</Item>

<Item>
Make sure that the file  
       <F>WWW2/lib/AllLinksOfAllHelpSections.data</F> is always up-to-date
     (this has to be adjusted whenever the released manuals change).

<P/>
     In the development version of &GAP; there is a file 
     <F>dev/LinksOfAllHelpSections.g</F>.
     Read this with a current &GAP; version with all currently released
     packages installed and call <C>WriteAllLinksOfAllHelpSections()</C>, 
     this writes the file <F>AllLinksOfAllHelpSections.data</F>. It has
     then to be checked in to its place under the <F>WWW2</F> tree.
     Do not forget to publish the latest revision.
</Item>

<Item>
Run the mixer:

<Verb>
    ../Mixer/mixer.py -f
</Verb>
    (the <C>-f</C> forces creation regardless of timestamps)
</Item>
</Enum>

</Subsection>

<Subsection>
<Heading> Installing updated versions </Heading>

If things are changed in CVS, all that has to be done to update the
pages locally is:

<Verb>
  cvs update
</Verb>

in the <F>WWW2</F> directory, followed by a
             
<Verb>
  ../Mixer/mixer.py
</Verb>

The mixer has an option <C>-f</C> to force recreation of all pages. This is
necessary if some general files like the address database
<F>lib/addresses</F> or templates changes.

<P/>
To change the sitemap, use <C>xfig</C> to change <F>sitemap.fig</F>, then run
<C>makesitemap.sh</C> (which uses <C>fig2dev</C> and 
<Package>Python</Package>), then rerun
the <Package>Mixer</Package> 
(<C>../Mixer/mixer.py</C>), possibly with <C>-f</C> to force new 
generation of pages.

</Subsection>

</Section>

<Section Label="WPManuals">
<Heading>The &GAP; manuals on the web pages</Heading>

All &GAP; manuals are available in HTML format via the web pages. This
works by simply copying the <F>doc</F> directory of a complete &GAP;
installation to the place specified by the variable <F>GAPManualLink</F>
in <F>WWW2/lib/config</F> (which is <F>WWW2/Manuals</F> in the current
setup). Note that those files are <E>not</E>
under CVS control there, they are only copied to checked out
working copies, like for example on the web server in St Andrews.

<P/>
The single remaining point to explain is how one can specify links
to manual sections on the web pages. This is done with a special
<Package>Mixer</Package> tag like the following:

<Verb>
    &lt;mixer manual="Reference: Lists"&gt;Chapter about lists&lt;/mixer&gt;
</Verb>

This element creates a link to the manual section which would appear
in the &GAP; help system when called with <Q><C>?Reference: Lists</C></Q>, which
happens to be the chapter in the reference manual about lists. The
text of the link would be <Q>Chapter about lists</Q>.

<P/>
This works, because the <Package>Mixer</Package> has access to a file
containing the links to all manual sections. This file resides in
<F>WWW2/lib/AllLinksOfAllHelpSections.data</F>, which is created
using <F>dev/LinksOfAllHelpSections.g</F> in the development version
of &GAP; as described in Section <Ref Sect="WPInstall"/>.

<P/>
The value of the attribute <Q>manual</Q> in the <Q>mixer</Q> tag
must be the complete text of the section heading the link should
point to.
</Section>

<Section Label="WPPackages">
<Heading>The &GAP; packages on the web pages</Heading>

The archives and web pages for the &GAP; packages are generated
by yet another set of tools described in Chapter <Ref Chap="Chap-PkgDist"/>. 
These generate for every package a <F>.mixer</F>-file and for all packages
together a file <F>pkgconf.py</F>. All these files have to be put
under CVS control in the directory <F>WWW2/Packages</F>. These nodes then only
have to be put into the tree by mentioning them in the <F>tree</F> file
there.

</Section>

<Section Label="WPSearch">
<Heading>The search engine on the web pages</Heading>

The search engine on the web pages internally uses the <C>swish</C> tool.
It is used to create an index of all pages which allows very fast
searches when a user submits a query. All files for this setup are in
the directory <F>WWW2/Search</F>.

<P/>
The indices are regenerated by doing

<Verb>
    touch everything.conf
    make
</Verb>

in that directory. This is done automatically every night, such that 
usually nothing has to be done after installation.

<P/>
To make this work, one needs a <C>swish</C> executable and has to create
a link <F>WWW2/Search/swish</F> to that executable.

</Section>

<Section Label="WPBiblio">
<Heading>The &GAP; bibliography</Heading>

The &GAP; bibliography resides in the directory <F>WWW2/Doc/Bib</F>.

<P/>
The source files are:

<List>
    <Mark> <F>GapCite.MR</F> </Mark>
    <Item> This file contains just MR numbers of papers that cite or refer 
    to (one of the versions of) GAP (here and below <Q>MR</Q> stands for 
    <Q>Mathematical Reviews</Q>.). The format is alternatingly one line 
    of the form <C>1stAuthorSurname Paper</C> (not starting with a blank) and
    one line <C>MR-Number</C> (starting with a blank). MR numbers will be used
    to get full bibliographic info from MathSciNet, and the textual description
    only helps when adding papers to the file (in particular, to keep entries 
    sorted by the first author).
    </Item>
    <Mark> <F>GapCite.notyet</F> </Mark>
    <Item> <C>BiBTeX</C> entries for papers that are not yet in MR but
        likely will be there in a few months </Item>
    <Mark> <F>GapNonMR.bib</F> </Mark>
    <Item> <C>BiBTeX</C> entries for papers that will not be in MR (e.g. 
           theses)
    </Item>
    <Mark> <F>NonVerif.MR</F> </Mark>
    <Item> Things not yet verified, same format as <F>GapCite.MR</F></Item>
    <Mark> <F>NonVerif.NonMR</F> </Mark>
    <Item> Things not yet verified, same format as <F>GapCite.notyet</F></Item>
    <Mark> <F>GapIgnore.MR</F> </Mark>
    <Item> This file contains a list of &GAP; strings corresponding to MR 
    numbers of papers that may be falsely reported by MathSciNet as citing
    &GAP; (for example, if they refer to the History of Mathematics Archive
    website wrongly stating its address in the &GAP; domain as may be returned
    by some search systems). If necessary, add new items there in an obvious
    way.
    </Item>
</List>

It is possible to check MathSciNet for new references to &GAP; reading the 
file <F>updatebib.g</F> into &GAP;. It will produce two files:

<List>
    <Mark> <F>tobeadded.txt</F> </Mark>
    <Item> This file has the same format as <F>GapCite.MR</F> and 
    lists publications citing &GAP; which should be examined and 
    after that added either to <F>GapCite.MR</F> or to <F>GapIgnore.MR</F>.
    </Item>
    <Mark> <F>suggested.txt</F> </Mark>
    <Item> This file contains suggestions to <Q>move</Q> certain entries
    from <F>GapCite.notyet</F> and <F>GapNonMR.bib</F> to <F>GapCite.MR</F>.
    All suggestions, including those which do not match the publication
    listed in the &GAP; bibliography, should be carefully examined before any
    changes.
    </Item>
</List>

Note that <F>updatebib.g</F> is not a complete solution for updating &GAP; 
bibliography. It searches for occurrences of the substring <C>www.gap</C>
in citations (this covers both old and current addresses of the &GAP; website), 
but it does not cover publications citing &GAP; without its website or referring
to it only in the text; finally, it covers only MathSciNet and does not look
into other bibliography databases. Therefore, manual search still should be 
used to discover more &GAP; citations. The function 
<C>SearchMathSciNetForUpdates</C> from <F>updatebib.g</F> may be helpful in
this direction since it performs more broad search in the MathSciNet, dropping
some more strict limitations.
<P/>

After the source files of the &GAP; bibliography are updated, the script 
<F>newmakegapbib</F> uses <F>GapCite.MR</F>, <F>GapCite.notyet</F> and 
<F>GapNonMR.bib</F> (and also <F>HEADER</F> and <F>MRBIB</F>) to
produce <F>gap-published.bib</F> (this requires subscription to MathSciNet, 
which St Andrews has). The advantage of this approach is that MathSciNet gives 
us good <C>BiBTeX</C> entries (no need to look up journal names or diacritic
characters) and their updates, and MR numbers we can link to. It also makes 
it easier to add entries as only the MR number is needed.
<P/>

At the end of its work <F>newmakegapbib</F> will also display error 
messages reporting MR numbers whose BibTeX record it failed to fetch from 
MathSciNet -- these should be investigated since they may point out on
some inconsistencies in our data.
<P/>

<P/>
(There is also a script <C>GETMR</C> that will return MR
numbers for papers -- convenient to look up a large number of papers one
found in the citation index.)

<P/>
Finally &GAP; itself called with <F>convbib.g</F> produces the web page
and a nice PDF bibliography from <F>gap-published.bib</F> (using further
helper files <F>gapbib.tex</F> and <F>gap-head.bib</F>). The resulting
files are <F>gap-published.html</F> and <F>gap-published.pdf</F> which 
are linked from the main web page <F>bib.html</F>. <E>NOTE</E> that 
<F>gap-published.html</F> and <F>gap-published.pdf</F> are <E>not</E> in 
CVS because they can be generated automatically by <F>convbib.g</F> rather 
quickly. In addition, <F>convbib.g</F> creates <F>statistics.generated</F>
and <F>statistics.mscreport</F> - two pages with tables which are used in 
<F>statistics.mixer</F> to create <F>statistics.html</F>.
<P/>

The output of <F>convbib.g</F> should be also checked for errors and warnings
reporting repeated entries, incomplete BibTeX records (mostly may be ignored), etc.
<P/>

<E>NOTE</E>: 
Please do not forget to tag the latest version of <F>gap-published.bib</F> 
and <F>statistics.generated</F> after their creation and check them in 
with the <C>PUB</C> tag:

<Verb>
  cvs tag -F PUB gap-published.bib
  cvs tag -F PUB statistics.generated
  cvs tag -F PUB statistics.mscreport
</Verb>

Otherwise the nightly update script will revert to the old version.
<P/>

<E>NOTE 2</E>: 
The current setup does not run &GAP; on <F>convbib.g</F>
every night. This means that everybody who changes the &GAP; bibliography
has to do this manually on <C>yin</C> after every change.
<P/>




</Section>

<Section Label="WPSitemap">
<Heading>The sitemap</Heading>

The sitemap picture is generated and edited in the following way: The
original source is the file <F>sitemap.fig</F> which is generated and
edited with the <C>xfig</C> program. The links for the buttons are
entered in the comment fields of the boxes for example as follows:

<Verb>
    href="Gap3/Overview3/overview.html" alt="GAP3 Overview"
</Verb>

Then the script <C>makesitemap.sh</C> produces the image itself together
with the links, which end up in the file <F>sitemap.map</F>, which in turn
is included into <F>sitemap.html</F> by the <Package>Mixer</Package>
when working on <F>sitemap.mixer</F>. Because the sitemap usually does
not change very much, the file <F>sitemap.map</F> is put under
CVS control even if it is generated automatically.

<P/>
That is, after changing <F>sitemap.fig</F> one simply calls 
<C>makesitemap.sh</C> and commits and publishes <F>sitemap.fig</F> and
<F>sitemap.map</F>. The <Package>Mixer</Package> takes care of the rest.

</Section>

<Section Label="WPForum">
<Heading>The &GAP; forum archive</Heading>

Until December 2003 the &GAP; forum archive was handled by a tool written
especially for this task. At that point it was switched to <C>mailman</C>,
a generic tool for mailing list, which also does the archiving. 
Therefore the old forum archives are frozen in form of a huge amount
of HTML pages. These are not in CVS as single files but as one big
binary archive under <F>WWW2/ForumArchive.tar.gz</F>. 

<P/>
To install those pages in a checked out working copy one just has to 
extract this archive by doing

<Verb>
    gzip -dc ForumArchive.tar.gz | tar xf -
</Verb>

in the <F>WWW2</F> directory as explained in Section <Ref Sect="WPInstall"/>.
</Section>

</Chapter>

