%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%A  grplib.msk                  GAP documentation          Heiko Theissen
%A                                                         Volkmar Felsch
%A                                                         Bettina Eick
%A                                                         Alexander Hulpke
%A                                                         Hans Ulrich Besche
%%
%A  @(#)$Id$
%%
%Y  (C) 1998 School Math and Comp. Sci., University of St.  Andrews, Scotland
%%
\Chapter{Group Libraries}

When you start {\GAP}, it  already knows several groups. Currently {\GAP}
initially knows the following groups:
\beginlist
  \item{$\bullet$} some basic groups, such  as cyclic groups or symmetric
    groups (see~"Basic Groups"),
  \item{$\bullet$} Classical matrix groups (see~"Classical Groups"),
  \item{$\bullet$} the transitive permutation groups of degree at most 23
    (see~"Transitive permutation groups"),
  \item{$\bullet$} a library of groups of small order (see~"Small Groups"),
  \item{$\bullet$}  the  finite perfect  groups of   size  at most $10^6$
    (excluding 11 sizes) (see~"Finite perfect groups").
  \item{$\bullet$}  a library of  primitive  permutation groups of degree
    $\<1000$, complete  for degrees  $\<256$ (see~"Primitive  permutation
    groups"),
  \item{$\bullet$}  the  irreducible solvable subgroups of  $GL(n,p)$ for
    $n>1$ and $p^n \< 256$ (also in "Primitive permutation groups"),
%\item{$\bullet$} the irreducible maximal finite integral matrix groups
%  of dimension at most  24  (see~"Irreducible Maximal Finite Integral
%  Matrix Groups"),
%\item{$\bullet$} the  crystallographic  groups  of  dimension  at most  4
%  (see~"The Crystallographic Groups Library").
\endlist

There   is usually no   relation  between the   groups  in the  different
libraries and a group may occur in different libraries in different
incarnations.

Note that a system administrator may choose to install all, or
only a  few,  or even  none of the  libraries.  So some  of the libraries
mentioned below may not be available on your installation.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Basic Groups}

\FileHeader[1]{grp/basic}

\Declaration{TrivialGroup}
\beginexample
gap> TrivialGroup();
<pc group of size 1 with 0 generators>
gap> TrivialGroup( IsPermGroup );
Group(())
\endexample

\Declaration{CyclicGroup}
\beginexample
gap> CyclicGroup(12);
<pc group of size 12 with 3 generators>
gap> CyclicGroup(IsPermGroup,12);
Group( [ ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12) ] )
gap> matgrp1:= CyclicGroup( IsMatrixGroup, 12 );
<matrix group of size 12 with 1 generators>
gap> FieldOfMatrixGroup( matgrp1 );
Rationals
gap> matgrp2:= CyclicGroup( IsMatrixGroup, GF(2), 12 );
<matrix group of size 12 with 1 generators>
gap> FieldOfMatrixGroup( matgrp2 );
GF(2)
\endexample

\Declaration{AbelianGroup}
\beginexample
gap> AbelianGroup([1,2,3]);
<pc group of size 6 with 3 generators>
\endexample

\Declaration{ElementaryAbelianGroup}
\beginexample
gap> ElementaryAbelianGroup(8192);
<pc group of size 8192 with 13 generators>
\endexample

\Declaration{DihedralGroup}
\beginexample
gap> DihedralGroup(10);
<pc group of size 10 with 2 generators>
\endexample

\Declaration{ExtraspecialGroup}
\beginexample
gap> ExtraspecialGroup( 27, 3 );
<pc group of size 27 with 3 generators>
gap> ExtraspecialGroup( 27, '+' );
<pc group of size 27 with 3 generators>
gap> ExtraspecialGroup( 8, "-" );
<pc group of size 8 with 3 generators>
\endexample

\Declaration{AlternatingGroup}
\beginexample
gap> AlternatingGroup(5);
Alt([1..5])
\endexample

\Declaration{SymmetricGroup}
\beginexample
gap> SymmetricGroup(10);
Sym([1..10])
\endexample

Note that permutation groups provide special treatment of symmetric and
alternating groups, see~"Symmetric and Alternating Groups".

\Declaration{MathieuGroup}
\beginexample
gap> MathieuGroup( 11 );
Group([ ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11), ( 3, 7,11, 8)( 4,10, 5, 6) ])
\endexample

\Declaration{SuzukiGroup}
\beginexample
gap> SuzukiGroup( 32 );
Sz(32)
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Classical Groups}

\FileHeader[1]{grp/classic}

\Declaration{GeneralLinearGroup}
\beginexample
gap> GL(4,3);
GL(4,3)
\endexample

\Declaration{SpecialLinearGroup}
\beginexample
gap> SpecialLinearGroup(2,2);
SL(2,2)
\endexample

Using the `OnLines' operation it is possible to obtain the corresponding
projective groups in a permutation action:

\beginexample
gap> g:=GL(4,3);;Size(g);
24261120
gap> pgl:=Action(g,Orbit(g,Z(3)^0*[1,0,0,0],OnLines),OnLines);;
gap> Size(pgl);
12130560
\endexample

\Declaration{GeneralUnitaryGroup}
\beginexample
gap> GeneralUnitaryGroup( 3, 5 );
GU(3,5)
\endexample

\Declaration{SpecialUnitaryGroup}
\beginexample
gap> SpecialUnitaryGroup( 3, 5 );
SU(3,5)
\endexample

\Declaration{SymplecticGroup}
\beginexample
gap> SymplecticGroup( 4, 2 );
Sp(4,2)
\endexample

\Declaration{GeneralOrthogonalGroup}
\Declaration{SpecialOrthogonalGroup}
\beginexample
gap> GeneralOrthogonalGroup( 3, 7 );
GO(0,3,7)
gap> GeneralOrthogonalGroup( -1, 4, 3 );
GO(-1,4,3)
gap> SpecialOrthogonalGroup( 1, 4, 4 );
GO(+1,4,4)
\endexample

\Declaration{ProjectiveGeneralLinearGroup}
\Declaration{ProjectiveSpecialLinearGroup}
\Declaration{ProjectiveGeneralUnitaryGroup}
\Declaration{ProjectiveSpecialUnitaryGroup}
\Declaration{ProjectiveSymplecticGroup}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Constructors for Basic Groups}

All functions described in the previous sections call constructor operations
to do the work.
The names of the constructors are obtained from the names of the functions
by appending `Cons', so for example `CyclicGroup' calls the constructor

\){\fmark CyclicGroupCons( <cat>, <n> )} O

The first argument <cat> for each method of this constructor must be
the category for which the method is installed.
For example the method for constructing a cyclic permutation group
is installed as follows (see~"prg:InstallMethod" in ``Programming in {\GAP}''
for the meaning of the arguments of `InstallMethod').
\begintt
InstallMethod( CyclicGroupCons,
    "regular perm group",
    true,
    [ IsPermGroup and IsRegularProp and IsFinite, IsInt and IsPosRat ], 0,
    function( filter, n )

    ...

    end );
\endtt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Selection Functions}

\)\fmark All<Library>Groups( $<fun>_1$, $<val>_1$, \dots\ )

For each of the following group libraries there is a *selection function*.
This function permits one to select all groups from the library that have a
given set of properties.

The name of the selection  functions always begins  with `All' and always
ends with `Groups'. In between is a  name that hints at the nature of the
group library. For example, the selection function for the library of all
primitive  groups (see~"Transitive permutation groups") is called
`AllTransitiveGroups'.

These  functions take an  arbitrary number of  pairs of  arguments.   The
first argument in such a pair  is a function  that can  be applied to the
groups in the library,  and the second  argument is either a single value
that this  function must return in  order  to have this group included in
the selection, or a list of such values. For example,
\begintt
AllTransitiveGroups(NrMovedPoints,[10..15],
		    Size,         [1..100],
		    IsAbelian,    false    );
\endtt
returns a list of all transitive  groups with  degree between 10 and
15 and size less than 100 that are not abelian.

Thus  the `AllTransitiveGroups'  behaves  as if   it was implemented  by a
function similar to the one defined below, where `TransitiveGroupsList' is a
list of all primitive groups.  (Note that in  the definition below we assume
for simplicity that `AllTransitiveGroups' accepts exactly 4 arguments.  It is
of course  obvious how to change this  definition so that the function would
accept a variable number of arguments.)

\begintt
AllTransitiveGroups := function( fun1, val1, fun2, val2 )
local    groups, g, i;
  groups := [];
  for i  in [ 1 .. Length( TransitiveGroupsList ) ] do
    g := TransitiveGroupsList[i];
    if      fun1(g) = val1  or IsList(val1) and fun1(g) in val1
        and fun2(g) = val2  or IsList(val2) and fun2(g) in val2
     then
      Add( groups, g );
    fi;
  od;
  return groups;
end;
\endtt
Note that the real  selection functions are considerably  more difficult,
to improve the efficiency. Most  important, each recognizes a certain set
of properties which are precomputed for the library without having to
compute them anew for each group. This will substantially speed up the
selection process.
In the description of each library we will
list the properties that are stored for this library.

\)\fmark One<Library>Group( $<fun>_1$, $<val>_1$, \dots\ )

% If you  do not want  all groups with the  prescribed properties, but only
% one example, you should call the *example function*. It returns `fail' if
% no such group exists in the library.
%  
% The following sections describing a particular group library mention only
% the *extraction   function*, by which  you  address a group   via (1)~its
% degree  or   size    (or for  matrix   groups  its    dimension  and  its
% characteristic) and  (2)~its  number  in  the list  of all   groups  with
% property~(1).

This function simply returns the first (in the stored order) group  in the
library that has the prescribed properties.
It returns `fail' if no such group exists in the library.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Transitive Permutation Groups}

The transitive groups library currently contains representatives for all
transitive permutation groups of degree at most  23.
Two permutations groups of the same degree are considered to be
equivalent, if there is a renumbering of points, which maps one group into
the other one.
In other words, if they lie in the same conjugacy class under operation
of the full symmetric group by conjugation.

\Declaration{TransitiveGroup}
\Declaration{NrTransitiveGroups}

The selection functions (see~"Selection functions") for the transitive
groups library are `AllTransitiveGroups' and `OneTransitiveGroup'. They
obtain the following properties from the database without having to compute
them anew:

`NrMovedPoints', `Size',   `Transitivity', and `IsPrimitive'.

This library was computed by  Gregory Butler, John McKay, Gordon Royle
and Alexander Hulpke.  The list of transitive  groups up  to degree 11
was published in \cite{BM83},  the list of degree  12 was published in
\cite{Roy87}, degree 14 and  15 were published in  \cite{Butler93} and
degrees 16--22 in \cite{Hulpke96}. (Groups of prime degree of course are
primitive and were known long before.)

The arrangement and the names of the groups of degree up to 15 is the same
as given in \cite{ConwayHulpkeMcKay98}. With the exception of the symmetric
and alternating group (which are represented as `SymmetricGroup' and
`AlternatingGroup') the generators for these groups also conform to this
paper with the only difference that 0 (which is not permitted in {\GAP} for
permutations to act on) is always replaced by the degree.

\beginexample
gap> TransitiveGroup(10,22);
S(5)[x]2
gap> l:=AllTransitiveGroups(NrMovedPoints,12,Size,1440,IsSolvable,false);
[ S(6)[x]2, M_10.2(12) = A_6.E_4(12) = [S_6[1/720]{M_10}S_6]2 ]
gap> List(l,IsSolvable);
[ false, false ]
\endexample

\Declaration{TransitiveIdentification}
\beginexample
gap> TransitiveIdentification(Group((1,2),(1,2,3)));
2
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Small Groups}

This library contains explicit lists of all groups of certain orders 
up to isomorphism. Currently, the catalogue contains the groups 

\beginlist
  \item{$\bullet$} whose order factorises in at most 3 primes.
  \item{$\bullet$} of order at most 2000 except 1024.
  \item{$\bullet$} of order $5^5$ and $7^4$.
  \item{$\bullet$} of order $q^n \cdot p$ where $q^n$ divides
                   $2^8$, $3^6$, $5^5$ or $7^4$ and $p$ is an 
                   arbitrary prime different to $q$.
\endlist

The groups whose order factorises in at most 3 primes have been classified
by O. H{\accent127o}lder in 1893. An explicit description of these groups 
can be found in \cite{Neu67}. The remaining $p$-groups in the catalogue 
have been constructed by E. A. O'Brien using the $p$-group generation 
method, see \cite{New77}, \cite{OBr90} and \cite{OBr91}. An implementation 
of this method is part of the ANUPQ share package of GAP. The nilpotent 
groups are then obtained as direct products of $p$-groups. The remaining 
non-nilpotent groups of order at most 2000 have been determined by Hans 
Ulrich Besche and Bettina Eick using the coprime split extensions method
for solvable groups with certain normal Hall subgroups, the Frattini 
extension method for solvable group in general and the well-known cyclic
extension algorithm for non-solvable groups. In \cite{BescheEick98} and
\cite{BescheEick1000} a first version of these methods is described and
they are also available within the GrpConst share package of GAP. The 
groups of order $q^n \cdot p$ have been constructed using a generic
variation of our algorithms, see \cite{BescheEick768}. A survey on group 
constructions and our algorithms for this purpose can be found in \cite{BEO}.

The Small Groups Library incorporates the Gap 3 libraries `TwoGroup' 
and `ThreeGroup' without changes. In particular, the 2- and 3-groups in
the Small Groups Library are sorted as the groups in `TwoGroup' or 
`ThreeGroup'. Moreover, the Small Groups Library substitutes the Gap 3
library of solvable groups of order at most 100, but here the sorting
of groups has changed in the Small Groups Library.

Additionally to the catalogue of groups there exists an identification
routine for groups of small order; that is, a function that returns the
catalogue number of a given group. This function determines catalogue 
numbers using invariants of groups. The function is available for all 
orders in the catalogue except 512 and 1536.

The catalogue is organised in 8 layers. It is possible to install the
first $n$ layers only for each $n$ in the range of 1 to 8. There exists 
an extensive README file for the Small Groups Library containing detailed 
information on the layers. The layers contain:

\beginlist
   \item{(1)} the groups whose size factorises in at most 3 primes.
   \item{(2)} the remaining groups of size a most 1000 except 512 and 
                    768.
   \item{(3)} the remaining groups of size $2^n * p$ with $n \leq 8$ 
                    and $p$ an odd prime.
   \item{(4)} the remaining groups of size $q^n * p$ where $q^n$ 
                    divides $3^6$, $5^5$ or $7^4$ and $p$ is a prime 
                    different to $q$. Moreover, this layer contains the
                    groups of order $5^5$ and $7^4$.
   \item{(5)} the remaining groups of order at most 2000 except
                    1024, 1152, 1536 and 1920.
   \item{(6)} the groups of orders 1152 and 1920.
   \item{(7)} the groups of order 512.
   \item{(8)} the groups of order 1536.
\endlist

\Declaration{SmallGroup}
\Declaration{AllSmallGroups}
\Declaration{OneSmallGroup}
\Declaration{SmallGroupsInformation}
\Declaration{NumberSmallGroups}
\Declaration{IdGroup}
\Declaration{IdsOfAllSmallGroups}
\Declaration{Gap3CatalogueGroup}
\Declaration{Gap3CatalogueIdGroup}
\Declaration{UnloadSmallGroupsData}

\beginexample
gap> G := SmallGroup( 768, 1000000 );
<pc group of size 768 with 9 generators>
gap> NumberSmallGroups( 512 );
10494213
gap> NumberSmallGroups( 768 );
1090235
gap> NumberSmallGroups( 2^8 * 5 );
1116461
gap> AllGroups( Size, 120, IsSolvableGroup, false );
[ Group([ ( 1, 2, 4, 8)( 3, 6, 9, 5)( 7,12,13,17)(10,14,11,15)(16,20,21,24)
        (18,22,19,23), ( 1, 3, 7)( 2, 5,10)( 4, 9,13)( 6,11, 8)(12,16,20)
        (14,18,22)(15,19,23)(17,21,24) ]), Group([ (1,2,3,4,5), (1,2) ]),
  Group([ (1,2,3,5,4), (1,3)(2,4)(6,7) ]) ]
gap> IdsOfAllGroups( Size, 60, IsSupersolvableGroup, true );
[ [ 60, 1 ], [ 60, 2 ], [ 60, 3 ], [ 60, 4 ], [ 60, 6 ], [ 60, 7 ],
  [ 60, 8 ], [ 60, 10 ], [ 60, 11 ], [ 60, 12 ], [ 60, 13 ] ]
gap> OneGroup( Size, [1..1000], IsSolvableGroup, false );
Group([ (1,2,3,4,5), (1,2,3) ])
gap> List( DerivedSeries( Gap3CatalogueGroup( 24, 15 ) ), Size );
[ 24, 12, 4, 1 ]
gap> IdGroup( GL( 2,3 ) );
[ 48, 29 ]
gap> Gap3CatalogueIdGroup( GL( 2,3 ) );
[ 48, 49 ]
gap> UnloadSmallGroupsData();
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Finite Perfect Groups}
\index{perfect groups}%

The {\GAP} library of finite  perfect groups provides, up to isomorphism,
a list of all perfect groups whose sizes are less than  $10^6$  excluding
the following sizes:
\beginlist
  \item{$\bullet$}
      For $n = 61440$, 122880, 172032, 245760, 344064, 491520, 688128, or
      983040,  the perfect groups  of size  $n$  have not completely been
      determined yet.  The library  neither provides  the number of these
      groups nor the groups themselves.
  \item{$\bullet$}
      For  $n = 86016$,  368640,  or  737280,  the library  does not  yet
      contain  the perfect groups  of size  $n$,  it  only provides their
      numbers which are 52, 46, and 54, respectively.
\endlist

Except for these eleven sizes, the list of altogether 1096 perfect groups
in the  library is complete. It  relies  on results  of Derek~F. Holt and
Wilhelm Plesken which  are published in their  book  {\it Perfect Groups}
\cite{HP89}. Moreover,   they     have  supplied us    with    files with
presentations of 488 of the groups. In terms of  these, the remaining 607
nontrivial groups in the library can be described as 276 direct products,
107  central   products, and 224  subdirect  products.  They are computed
automatically by suitable {\GAP} functions whenever they are needed.

We are grateful to Derek Holt and Wilhelm Plesken for making their groups
available to the {\GAP} community  by contributing their files. It should
be noted that  their book contains a  lot of further information for many
of the library groups.  So we would like  to recommend  it to any  {\GAP}
user who is interested in the groups.

The library has been brought into {\GAP} format by Volkmar Felsch.

\Declaration{SizesPerfectGroups}

\Declaration{PerfectGroup}
\beginexample
gap> G := PerfectGroup(IsPermGroup,6048,1);
U3(3)
\endexample

As  all groups are stored  by presentations, a permutation representation
is obtained by coset enumeration. Note that some of the library groups do
not have a   faithful   permutation  representation  of small     degree.
Computations in these groups may be rather time consuming.
\beginexample
gap> G:=PerfectGroup(IsPermGroup,129024,2);
L2(8) N ( 2^6 E 2^1 A ) C 2^1
gap> NrMovedPoints(G);
14336
\endexample

\Declaration{PerfectIdentification}

\Declaration{NumberPerfectGroups}
\Declaration{NumberPerfectLibraryGroups}

\Declaration{SizeNumbersPerfectGroups}

\Declaration{DisplayInformationPerfectGroups}

\beginexample
gap> DisplayInformationPerfectGroups( 30720, 3 );
#I Perfect group 30720:  A5 ( 2^4 E N 2^1 E 2^4 ) A
#I   size = 2^11*3*5  orbit size = 240
#I   Holt-Plesken class 1 (9,3)
gap> DisplayInformationPerfectGroups( 30720, 6 );
#I Perfect group 30720:  A5 ( 2^4 x 2^4 ) C N 2^1
#I   centre = 2  size = 2^11*3*5  orbit size = 384
#I   Holt-Plesken class 1 (9,6)
gap> DisplayInformationPerfectGroups( Factorial( 8 ) / 2 );
#I Perfect group 20160.1:  A5 x L3(2) 2^1
#I   centre = 2  size = 2^6*3^2*5*7  orbit sizes = 5 + 16
#I   Holt-Plesken class 31 (1,1) (occurs also in class 32)
#I Perfect group 20160.2:  A5 2^1 x L3(2)
#I   centre = 2  size = 2^6*3^2*5*7  orbit sizes = 7 + 24
#I   Holt-Plesken class 31 (1,2) (occurs also in class 32)
#I Perfect group 20160.3:  ( A5 x L3(2) ) 2^1
#I   centre = 2  size = 2^6*3^2*5*7  orbit size = 192
#I   Holt-Plesken class 31 (1,3)
#I Perfect group 20160.4:  simple group  A8
#I   size = 2^6*3^2*5*7  orbit size = 8
#I   Holt-Plesken class 26 (0,1)
#I Perfect group 20160.5:  simple group  L3(4)
#I   size = 2^6*3^2*5*7  orbit size = 21
#I   Holt-Plesken class 27 (0,1)
\endexample

For any library  group  $G$, the library    files do not  only provide  a
presentation, but, in  addition, a list  of  one or more subgroups  $S_1,
\ldots,  S_r$  of   $G$ such   that   there is  a   faithful  permutation
representation  of $G$ of degree  $\sum_{i=1}^{r} [G:S_i]$ on the set $\{
S_i g \mid 1 \leq i \leq  r, \, g \in  G \}$ of  the cosets of the $S_i$.
This allows one to construct the groups as permutation groups. The
`DisplayInformationPerfectGroups'  function  displays  only the available
degree. The message
\begintt
orbit size = 8
\endtt

in the above example means  that the available permutation representation
is transitive and of degree 8, whereas the message
\begintt
orbit sizes = 5 + 16
\endtt
means that a nontransitive  permutation representation is available which
acts on two orbits of size 5 and 16 respectively.

The  notation used in  the ``description''  of  a  group is explained  in
section 5.1.2 of \cite{HP89}. We quote the respective page from there:

{\advance\leftskip by\manindent \advance\rightskip by\manindent
Within a class $Q\,\#\,p$, an isomorphism type  of groups will be denoted
by an  ordered pair of  integers $(r,n)$, where $r \geq  0$ and $n  > 0$.
More precisely, the isomorphism  types in $Q$ \# $p$  of order $p^r  \!\!
\mid  \!\! Q  \!\!  \mid$ will be  denoted by  $(r,1)$, $(r,2)$, $(r,3)$,
$\ldots\,$. Thus $Q$ will always get the size number $(0,1)$.

In  addition to the symbol $(r,n)$,  the groups in $Q  \,  {\sl \#} \, p$
will  also be given a  more descriptive name.  The purpose of  this is to
provide a very rough idea of  the structure of  the group.  The names are
derived in the following manner. First of all, the isomorphism classes of
irreducible  $F_pQ$-modules $M$ with $\mid \!\!  Q  \!\! \mid \mid \!\! M
\!\! \mid \,  \leq 10^6$,  where $F_p$ is   the field of  order $p$,  are
assigned symbols. These  will either  be simply $p^x$,  where $x$  is the
dimension of the module, or, if there is more  than one isomorphism class
of irreducible modules having the same dimension, they will be denoted by
$p^x$, $p^{x^\prime}$,  etc.   The one-dimensional  module   with trivial
$Q$-action  will therefore be denoted  by  $p^1$. These  symbols will  be
listed under the description of $Q$.  The group name consists essentially
of a list  of the composition factors  working from the  top of the group
downwards; hence  it always  starts with the  name  of $Q$ itself.  (This
convention is the most  convenient in our  context,  but it is  different
from that adopted  in the ATLAS \cite{CCN85}, for example,
where composition factors  are listed in the  reverse order. For example,
we denote a  group isomorphic to $SL(2,5)$  by  $A_5 2^1$ rather  than $2
\cdot A_5$.)

Some  other symbols are used  in the name, in order  to give some idea of
the   relationship  between these    composition  factors, and  splitting
properties. We shall now list these additional symbols.
\item{$\times$}  between  two  factors   denotes   a  direct  product  of
      $F_pQ$-modules or groups.
\item{C} (for ``commutator'') between two factors  means  that the second
      lies in the commutator subgroup of the first.  Similarly, a segment
      of the form  $(f_1 \! \times \! f_2) {\sl C} f_3$  would mean  that
      the factors $f_1$ and $f_2$  commute modulo $f_3$ and $f_3$ lies in
      $[f_1,f_2]$.
\item{A} (for ``abelian'') between two factors  indicates that the second
      is  in the  $p$th  power  (but not the commutator subgroup)  of the
      first.   ``A''   may  also   follow  the  factors,   if  bracketed.
\item{E} (for ``elementary abelian'') between two factors  indicates that
      together   they  generate  an  elementary  abelian  group   (modulo
      subsequent factors), but that the resulting $F_pQ$-module extension
      does not split.
\item{N}  (for ``nonsplit'') before  a  factor  indicates  that  $Q$  (or
      possibly its covering group)  splits down as far at this factor but
      not over the factor itself.  So  ``$Q f_1 {\sl N} f_2$'' means that
      the normal subgroup  $f_1f_2$  of the group  has no complement but,
      modulo $f_2$, $f_1$, does have a complement.

Brackets have their obvious meaning. Summarizing, we have:
\item{$\times$} = direct product;
\item{C} = commutator subgroup;
\item{A} = abelian;
\item{E} = elementary abelian; and
\item{N} = nonsplit.

Here are some examples.
\item{(i)}  $A_5 (2^4 {\sl E} 2^1 {\sl E} 2^4) {\sl A}$  means  that  the
      pairs  $2^4 {\sl E} 2^1$  and $2^1 {\sl E} 2^4$ are both elementary
      abelian of exponent 4.
\item{(ii)}   $A_5 (2^4 {\sl E} 2^1 {\sl A}) {\sl C} 2^1$    means   that
      $O_2(G)$  is of  symplectic type  $2^{1+5}$,  with  Frattini factor
      group  of type   $2^4 {\sl E} 2^1$.   The   ``A''  after the  $2^1$
      indicates that $G$ has a  central cyclic subgroup $2^1 {\sl A} 2^1$
      of order 4.
\item{(iii)}     $L_3(2) ((2^1 {\sl E}) \! \times \! ({\sl N} 2^3 {\sl E}
      2^{3^\prime} {\sl A}) {\sl C}) 2^{3^\prime}$    means   that    the
      $2^{3^\prime}$ factor at the bottom lies in the commutator subgroup
      of the pair $2^3 {\sl E} 2^{3^\prime}$ in the middle, but the lower
      pair $2^{3^\prime} {\sl A} 2^{3^\prime}$  is abelian of exponent 4.
      There  is  also  a submodule  $2^1 {\sl E} 2^{3^\prime}$,  and  the
      covering group  $L_3(2) 2^1$  of  $L_3(2)$  does not split over the
      $2^3$  factor.  (Since $G$ is perfect,  it goes without saying that
      the extension $L_3(2) 2^1$ cannot split itself.)

We  must  stress  that this  notation does   not  always succeed in being
precise  or even unambiguous, and the  reader is free to  ignore it if it
does not seem helpful.\par}

If such a group description has  been given in  the book for $G$ (and, in
fact, this is the case for  most of the library  groups), it is displayed
by the `DisplayInformationPerfectGroups' function. Otherwise the function
provides a less explicit  description  of  the  (in these cases   unique)
Holt-Plesken class to which $G$ belongs, together with a serial number if
this is necessary to make it unique.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Primitive Permutation Groups}

\FileHeader[1]{prim/primitiv}

\Declaration{PrimitiveGroup}
\Declaration{NrPrimitiveGroups}

\beginexample
gap> NrPrimitiveGroups(25);
28
gap> PrimitiveGroup(25,19);
5^2:((Q_8:3)`4
gap> PrimitiveGroup(25,20);
ASL(2,5)
gap> PrimitiveGroup(25,22);
AGL(2,5)
gap> PrimitiveGroup(25,23);
(A_5xA_5):2
\endexample

\FileHeader[2]{prim/primitiv}

\Declaration{PrimitiveGroupsIterator}

\Declaration{PrimitiveIdentification}
\beginexample
gap> PrimitiveIdentification(Group((1,2),(1,2,3)));
2
\endexample

\Declaration{SimsNo}

\beginexample
gap> g:=PrimitiveGroup(25,2);
5^2:S_3
gap> SimsNo(g);
3
\endexample

\>`COHORTS_PRIMITIVE_GROUPS'{COHORTSPRIMITIVEGROUPS}@{`COHORTSPRIMITIVEGROUPS'} V

In \cite{DixonMortimer88} the primitive groups are sorted in
``cohorts'' according to their socle. The variable
`COHORTS_PRIMITIVE_GROUPS' contains for each degree a list of the cohorts
for the primitive groups of this degree. Each cohort is represented by a
list of length 2, the first entry specifies the socle type (see
`SocleTypePrimitiveGroup', section~"SocleTypePrimitiveGroup"), the second
entry listing the index numbers of the groups in this degree.

For example in degree 49, we have four cohorts with socles $\F_7^2$,
$L_2(7)^2$, $A_7^2$ and $A_{49}$ respectively. the group
`PrimitiveGroup(49,36)', which is isomorphic to $(A_7\times A_7):2^2$, lies
in the third cohort with socle $(A_7\times A_7)$.
\begintt
gap> COHORTS_PRIMITIVE_GROUPS[49];
[ [ rec( series := "Z", width := 2, parameter := 7 ), 
      [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
          20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 ] ], 
  [ rec( series := "L", width := 2, parameter := [ 2, 7 ] ), [ 34 ] ], 
  [ rec( series := "A", width := 2, parameter := 7 ), [ 35, 36, 37, 38 ] ], 
  [ rec( series := "A", parameter := 49, width := 1 ), [ 39, 40 ] ] ]
\endtt

\Declaration{IrreducibleSolvableGroup}

The corresponding selection functions are `AllIrreducibleSolvableGroups' and
`OneIrreducibleSolvableGroup'. They obtain the following properties from the
database without having to compute them anew:
`Dimension' for the linear  degree, `CharFFE' for the field characteristic,
`Size', `IsLinearlyPrimitive' and `MinimalBlockDimension'.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%E

