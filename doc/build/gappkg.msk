%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%W  gappkg.msk                GAP documentation             Werner Nickel
%W                                                       Alexander Hulpke
%%
%H  @(#)$Id$
%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Chapter{GAP Packages}

\index{package}

The  functionality  of  {\GAP}  can  be  extended  by  loading  {\GAP}
packages. Many packages are distributed  together with the core system
of {\GAP} consisting of the {\GAP}  kernel, the {\GAP} library and the
various data libraries.

{\GAP} packages are written by (groups  of) {\GAP} users which may not
be  members  of the  {\GAP}  developer  team. The  responsibility  and
copyright of a {\GAP} package remains with the original author(s).

{\GAP}  packages  have  their  own  documentation  which  is  smoothly
integrated into the {\GAP} help system.

All  {\GAP}  users   who  develop  new  code  are   invited  to  share
the  results  of their  efforts  with  other  {\GAP} users  by  making
the  code  and its  documentation  available  in  form of  a  package.
Information how  to do  this is  available from  the {\GAP}  Web pages
(\URL{http://www.gap-system.org}) and in the extension manual 
"ext:Writing a GAP Package".
There  are  possibilities  to get  a  package  distributed together  with
{\GAP}  and it  is possible  to submit  a package  to a formal refereeing
process.

In this Chapter we describe how to use existing packages.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Installing a GAP Package}

Before a  package can be  used it must  be installed. With  a standard
installation of  {\GAP} there should  be quite a few  packages already
available. But since {\GAP} packages are released independently of the
main  {\GAP} system  it  may be  sensible to  upgrade  or install  new
packages between  upgrades of your {\GAP} installation.

A package consists of a collection  of files within a single directory
that must  be a subdirectory of  the `pkg'  directory   in one  of the
{\GAP} root directories, see "ref:GAP Root Directory". (If you don't
have access  to the `pkg'  directory in your main  {\GAP} installation
you can add private root directories as explained in that section.)

Whenever  you  get from  somewhere  an  archive  of a  {\GAP}  package
it  should be  accompanied  with  a `README'  file  that explains  its
installation.  Some packages  just  consist  of  {\GAP}  code and  the
installation  is  done  by  unpacking   the  archive  in  one  of  the
places  described above.  There are  also packages  that need  further
installation steps,  there may be  for example some  external programs
which  have  to  be  compiled  (this is  often  done  by  just  saying
`./configure; make'  inside the unpacked package  directory, but check
the individual `README' files).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Loading a GAP Package}

\index{automatic loading of GAP packages}
\index{disable automatic loading}
Some {\GAP} packages are prepared for *automatic loading*,
that is they will be loaded automatically with {\GAP},
others must in each case be separately loaded by a call to `LoadPackage'.

\Declaration{LoadPackage}

After a package  has been loaded its code and  documentation should be
available as other parts of the {\GAP} library are.

The documentation of each {\GAP} package  will tell you if the package
loads automatically or  not. Also, {\GAP} prints the list  of names of
all  {\GAP}  packages which  have  been  loaded (either  by  automatic
loading or  via `LoadPackage' commands  in one's `.gaprc' file  or the
like) at the end of the initialization process.

A {\GAP} package may also install only its documentation automatically
but still need loading by  `LoadPackage'. In this situation the online
help displays `(not  loaded)' in the header lines of  the manual pages
belonging to this {\GAP} package.

If for some reason you don't want certain packages to be automatically
loaded, {\GAP} provides three levels for disabling autoloading:

\indextt{NOAUTO}
The autoloading of  specific packages can be overwritten for the whole
{\GAP} installation by putting a file `NOAUTO' into a `pkg'  directory
that contains lines with the names  of packages  which  should  not be
automatically loaded.

Furthermore, individual users can disable the autoloading of specific
packages by using the following command in their `.gaprc' file
(see~"The .gaprc file").

\){\kernttindent}ExcludeFromAutoload( <pkgnames> );

where <pkgnames> is the list of names of the {\GAP} packages in question.

Using  the  `-A' command  line  option  when  starting up  {\GAP}
(see~"Command Line Options"), automatic loading is switched off,
and the scanning of the `pkg' directories containing the installed
packages is delayed until the first call of "LoadPackage".


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Functions for GAP Packages}

The  following functions  are  mainly  used in  files  contained in  a
package and not by users of a package.

\Declaration{ReadPackage}

\Declaration{TestPackageAvailability}

\Declaration{InstalledPackageVersion}

\Declaration{DirectoriesPackageLibrary}

As an example, the following returns a directory object for the library
functions of the {\GAP} package `Example':

%notest
\beginexample
gap> DirectoriesPackageLibrary( "Example", "gap" );
[ dir("/home/werner/gap/4.0/pkg/example/gap/") ]
\endexample

Observe that we needed the second argument `"gap"' here, since `Example''s
library functions are in the sub-directory `gap' rather than `lib'.

In order to  find  a  subdirectory  deeper  than  one  level  in  a  package
directory, the second argument is again necessary whether or not the desired
subdirectory relative to the package's  directory  begins  with  `lib'.  The
directories in <path> should be separated by  `/'  (even  on  systems,  like
Windows, which use `\\' as the directory separator).  For  example,  suppose
there is a package `somepackage' with a subdirectory `m11' in the  directory
`data', then we might expect the following:

%notest
\beginexample
gap> DirectoriesPackageLibrary( "somepackage", "data/m11" );
[ dir("/home/werner/gap/4.0/pkg/somepackage/data/m11") ]
\endexample

\Declaration{DirectoriesPackagePrograms}

%notest
\beginexample
gap> DirectoriesPackagePrograms( "nq" );
[ dir("/home/werner/gap/4.0/pkg/nq/bin/i686-unknown-linux2.0.30-gcc/") ]
\endexample

\Declaration{CompareVersionNumbers}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%E

