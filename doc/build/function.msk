%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%W  function.msk           GAP documentation                Alexander Hulpke
%%
%H  @(#)$Id$
%%
%Y  Copyright 1999
%%
%%  This file describes functions for functions.
%%
\Chapter{Functions}

\index{functions}
The section~"Function" describes how to define a function. In this chapter
we describe functions that give information about functions, and various
utility functions used either when defining functions or calling functions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Information about a function}

\Declaration{NameFunction}
\beginexample
gap> NameFunction(SylowSubgroup);
"SylowSubgroup"
gap> Blubberflutsch:=x->x;;
gap> NameFunction(Blubberflutsch);
"Blubberflutsch"
gap> a:=Blubberflutsch;;
gap> NameFunction(a);
"Blubberflutsch"
gap> NameFunction(x->x);
"unknown"
gap> NameFunction(NameFunction);
"NAME_FUNC"
\endexample

\Declaration{NumberArgumentsFunction}
\beginexample
gap> NumberArgumentsFunction(function(a,b,c,d,e,f,g,h,i,j,k)return 1;end);
11
gap> NumberArgumentsFunction(Size);
1
gap> NumberArgumentsFunction(IsCollsCollsElms);
3
gap> NumberArgumentsFunction(Sum);
-1
\endexample

\Declaration{NamesLocalVariablesFunction}
\beginexample
gap> NamesLocalVariablesFunction( function( a, b ) local c; return 1; end );
[ "a", "b", "c" ]
gap> NamesLocalVariablesFunction( function( arg ) local a; return 1; end );
[ "arg", "a" ]
gap> NamesLocalVariablesFunction( Size );
fail
\endexample


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Calling a function with a list argument that is interpreted as
several arguments}

\Declaration{CallFuncList}
\beginexample
gap> CallFuncList(\+, [6, 7]);
13
gap> #is equivalent to:
gap> \+(6, 7);
13
\endexample

A more useful application of `CallFuncList' is for a function <g> that is
called in the body of a function <f> with (a sublist of) the arguments of
<f>, where <f> has been defined  with  a  single  formal  argument  `arg'
(see~"function"); see the following code fragment.

\begintt
f := function ( arg )
       CallFuncList(g, arg);
       ...
     end;
\endtt

In the body of <f> the several arguments passed  to  <f>  become  a  list
`arg'. If <g> were called instead via `<g>( arg )' then <g> would  see  a
single list argument, so that <g> would, in general, have  to  ``unwrap''
the  passed  list.  The  following  (not  particularly  useful)   example
demonstrates both described possibilities for the call to <g>.

\beginexample
gap> PrintNumberFromDigits := function ( arg )
>     CallFuncList( Print, arg );
>     Print( "\n" );
>    end;
function( arg ) ... end
gap> PrintNumberFromDigits( 1, 9, 7, 3, 2 );
19732
gap> PrintDigits := function ( arg )
>     Print( arg );
>     Print( "\n" );
>    end;
function( arg ) ... end
gap> PrintDigits( 1, 9, 7, 3, 2 );
[ 1, 9, 7, 3, 2 ]
\endexample

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Functions that do nothing}

The following functions return fixed results (or just their own argument).
They can be useful in places when the syntax requires a function, but
actually no functionality is required. So `ReturnTrue' is often used as
family predicate in `InstallMethod'
(see~"prg:InstallMethod" in ``Programming in {\GAP}'').

\Declaration{ReturnTrue}
\Declaration{ReturnFalse}
\Declaration{ReturnFail}
\Declaration{IdFunc}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Function Types}

Functions are {\GAP} objects and thus have categories and a family.

\Declaration{IsFunction}
\Declaration{IsOperation}
\Declaration{FunctionsFamily}

